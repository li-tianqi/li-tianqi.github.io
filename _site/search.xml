<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[Python检测文件编码格式]]></title>
      <url>/python/2017/11/10/python-detect-encoding/</url>
      <content type="html"><![CDATA[<!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, Game, ]-->
<!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]-->

<h2 id="python检测文件编码格式">Python检测文件编码格式</h2>

<p>python3打开文件时默认以<code class="highlighter-rouge">utf-8</code>解析, 遇到非此编码文件, 会出现错误, 需要指定编码, 所以要检测文件编码</p>

<!--more-->

<p>方法:</p>

<p>用二进制打开-&gt; 用<code class="highlighter-rouge">chardet</code> 检测</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">chardet</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
	<span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
	<span class="k">print</span><span class="p">(</span><span class="n">chardet</span><span class="o">.</span><span class="n">detect</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
</code></pre></div></div>

]]></content>
      <categories>
        
          <category> Python </category>
        
      </categories>
      <tags>
        
          <tag> python3 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Latex公式语法记录]]></title>
      <url>/latex/2017/11/10/latex-note/</url>
      <content type="html"><![CDATA[<!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, Game, Latex]-->
<!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]-->

<h2 id="latex公式语法记录">Latex公式语法记录</h2>

<p>用Typora写公式异常的方便, 而且所见即所得, 包括在word中也支持latex语法, 比自带公式编辑器和mathtype都快得多:</p>

<p>word中用自带公式编辑器: <code class="highlighter-rouge">Alt</code> + <code class="highlighter-rouge">=</code> 插入公式, 不用<code class="highlighter-rouge">$</code> 符号, 直接输入latex语法, <code class="highlighter-rouge">空格</code> 后显示效果(<em>支持语法并不全</em>)</p>

<p>word中用mathtype: 直接输入由<code class="highlighter-rouge">$$</code> 包裹的latex公式, 按<code class="highlighter-rouge">Alt</code>+<code class="highlighter-rouge">\</code> 生成mathtype公式(<em>支持语法比较全, 但转换成公式的过程略慢</em>)</p>

<hr />

<p>为了方便查看语法, 这里随着使用, 逐步记录常用的Latex公式语法</p>

<!--more-->

<p>更多内容:  <a href="https://zh.wikibooks.org/wiki/LaTeX">https://zh.wikibooks.org/wiki/LaTeX</a></p>

<p>希腊字母: <a href="https://en.wikipedia.org/wiki/Greek_alphabet">https://en.wikipedia.org/wiki/Greek_alphabet</a></p>

<p>组合运算: $\binom{a}{b}$</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$\binom{a}{b}$
</code></pre></div></div>

<p>半边括号加矩阵形式:
<script type="math/tex">\left \{
\begin{matrix} 
a = 0 \\ 
a = 1 
\end{matrix} \right.</script></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$\left \{ \begin{matrix} a = 0 \\ a = 1 \end{matrix} \right.$
</code></pre></div></div>

<p>两边下标: $\sideset{_i^j}{_m^n}A$</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$\sideset{_i^j}{_m^n}A$
</code></pre></div></div>

<p>分数: $\frac{a}{b}$</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$\frac{a}{b}$
</code></pre></div></div>

<p>根号: $\sqrt{a}$</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$\sqrt{}$
</code></pre></div></div>

<p>点: $\cdot$</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$\cdot$
</code></pre></div></div>

<p>叉乘: $\times$</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$\times$
</code></pre></div></div>
]]></content>
      <categories>
        
          <category> Latex </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[nokogiri安装失败问题]]></title>
      <url>/ubuntu/web/2017/11/06/nokogiri-install/</url>
      <content type="html"><![CDATA[<!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, Game, ]-->
<!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]-->

<h2 id="nokogiri安装失败问题">nokogiri安装失败问题</h2>

<p>使用Jekyll时提示要安装nokogiri, 安装出错</p>

<p>根据提示, 要参考日志文件</p>

<!--more-->

<p>日志文件中显示缺少<code class="highlighter-rouge">zlib.h</code>, 经百度, 对应的包为<code class="highlighter-rouge">zlib1g-dev</code></p>

<p>安装之</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get install zlib1g-dev

sudo gem install nokogiri
</code></pre></div></div>

<p>成功!</p>
]]></content>
      <categories>
        
          <category> Ubuntu </category>
        
          <category> Web </category>
        
      </categories>
      <tags>
        
          <tag> jekyll </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[python的序列化和反序列化]]></title>
      <url>/python/2017/09/29/serialization-and-deserialization/</url>
      <content type="html"><![CDATA[<!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, ]-->
<!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]-->

<h2 id="python的序列化和反序列化">python的序列化和反序列化</h2>

<h3 id="概念">概念</h3>

<p>序列化(Serialization): 将对象状态存储为另一种通用格式, 比如二进制, xml, json等.</p>

<p>反序列化(deserialization): 将对应格式再转换回来构建成对象.</p>

<!--more-->

<h3 id="使用情况">使用情况</h3>

<p>a）当你想把的内存中的对象保存到一个文件中或者<a href="https://www.2cto.com/database/">数据库</a>中时候；
b）当你想用套接字在网络上传送对象的时候；
c）当你想通过RMI传输对象的时候；</p>

<h3 id="python实现">python实现</h3>

<p>python常用的序列化模块有两个: <code class="highlighter-rouge">pickle</code>和<code class="highlighter-rouge">json</code>, 其中<code class="highlighter-rouge">pickle</code>是将对象存储为<code class="highlighter-rouge">二进制</code>, 而<code class="highlighter-rouge">json</code>是将对象存储为<code class="highlighter-rouge">字符串</code>, 相对有更好的可读性和跨平台性.</p>

<h5 id="json模块">json模块</h5>

<h5 id="将对象序列化为字符串">将对象序列化为字符串</h5>

<p>用到的方法是<code class="highlighter-rouge">dumps(obj)</code> 和<code class="highlighter-rouge">loads(str)</code>, 举例如下:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">json</span>

<span class="n">dic</span> <span class="o">=</span> <span class="p">{</span><span class="s">'age'</span><span class="p">:</span><span class="mi">23</span><span class="p">,</span> <span class="s">'job'</span><span class="p">:</span> <span class="s">'student'</span><span class="p">}</span>

<span class="c"># 序列化</span>
<span class="n">dic_str</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">dic</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">dic_str</span><span class="p">),</span> <span class="n">dic_str</span><span class="p">)</span>

<span class="c"># 反序列化 </span>
<span class="n">dic_obj</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">dic_str</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">dic_obj</span><span class="p">),</span> <span class="n">dic_obj</span><span class="p">)</span>
</code></pre></div></div>

<p>输出»:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'str'&gt; {"age": 23, "job": "student"}
&lt;class 'dict'&gt; {'age': 23, 'job': 'student'}
</code></pre></div></div>

<p><code class="highlighter-rouge">dumps</code>将对象转换成了字符串, <code class="highlighter-rouge">loads</code>又将字符串恢复成了dict对象</p>

<h5 id="存储为json文件">存储为json文件</h5>

<p>将对象存储为json文件也很常用, 用到的方法是<code class="highlighter-rouge">dump(obj)</code>和<code class="highlighter-rouge">load(str)</code>, (<em>注意和上面的区别, 上面的多了 <code class="highlighter-rouge">s</code></em>), 例如:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">json</span>

<span class="n">dic</span> <span class="o">=</span> <span class="p">{</span><span class="s">'age'</span><span class="p">:</span><span class="mi">23</span><span class="p">,</span> <span class="s">'job'</span><span class="p">:</span> <span class="s">'student'</span><span class="p">}</span>

<span class="c"># 序列化</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'test.json'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">dic</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
<span class="c"># 生成json文件</span>
    
<span class="c"># 反序列化</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'test.json'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">obj</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">obj</span><span class="p">),</span> <span class="n">obj</span><span class="p">)</span>
</code></pre></div></div>

<p>输出»:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'dict'&gt; {'job': 'student', 'age': 23}
</code></pre></div></div>

<h5 id="存储自定义对象">存储自定义对象</h5>

<p>直接用<code class="highlighter-rouge">dump</code>序列化会报错, 因为<code class="highlighter-rouge">dump</code>需要一个参数<code class="highlighter-rouge">default</code>, 这个参数接收一个函数, 将对象转化为字典, 对象<code class="highlighter-rouge">object</code>有自身的<code class="highlighter-rouge">__dict__</code>方法, 所以序列化过程可以如下:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">job</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">job</span> <span class="o">=</span> <span class="n">job</span>

    <span class="k">def</span> <span class="nf">work</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="s">'is working...'</span><span class="p">)</span>

<span class="n">aa</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">'Bob'</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="s">'Student'</span><span class="p">)</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'abc.json'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
   <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">aa</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="k">lambda</span> <span class="n">obj</span><span class="p">:</span> <span class="n">obj</span><span class="o">.</span><span class="n">__dict__</span><span class="p">)</span>
</code></pre></div></div>

<p>也可以自己写转换函数, 比如:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">person2dict</span><span class="p">(</span><span class="n">person</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="n">person</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
            <span class="s">'age'</span><span class="p">:</span> <span class="n">person</span><span class="o">.</span><span class="n">age</span><span class="p">,</span>
            <span class="s">'job'</span><span class="p">:</span> <span class="n">person</span><span class="o">.</span><span class="n">job</span><span class="p">}</span>
  
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'abc.json'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">aa</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">person2dict</span><span class="p">)</span>
</code></pre></div></div>

<p>对于反序列化, 也需要一个参数<code class="highlighter-rouge">object_hook</code>, 将字典转为对象</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">dict2person</span><span class="p">(</span><span class="n">dic</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">Person</span><span class="p">(</span><span class="n">dic</span><span class="p">[</span><span class="s">'name'</span><span class="p">],</span> <span class="n">dic</span><span class="p">[</span><span class="s">'age'</span><span class="p">],</span> <span class="n">dic</span><span class="p">[</span><span class="s">'job'</span><span class="p">])</span>
  
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'abc.json'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">obj</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">object_hook</span><span class="o">=</span><span class="n">dict2person</span><span class="p">)</span>
</code></pre></div></div>

<p>用json模块实现, 需要手动实现<code class="highlighter-rouge">object_hook</code>参数, 并且不能序列化类.</p>

<h4 id="pickle模块">pickle模块</h4>

<p>用法与json差不多</p>

<p>由于<strong>pickle写入的是二进制数据</strong>，所以打开方式需要以<code class="highlighter-rouge">wb</code>和<code class="highlighter-rouge">rb</code>的模式</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pickle</span>

<span class="n">dic</span> <span class="o">=</span> <span class="p">{</span><span class="s">'age'</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span> <span class="s">'job'</span><span class="p">:</span> <span class="s">'student'</span><span class="p">}</span>

<span class="c">##############################################</span>
<span class="c"># 存储在变量中</span>
<span class="c"># 序列化</span>
<span class="n">byte_data</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">dic</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">byte_data</span><span class="p">)</span>
<span class="c"># 输出 b'\x80\x03}q\x00(X\x03\x00\x00\...'</span>

<span class="c"># 反序列化</span>
<span class="n">obj</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">byte_data</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
<span class="c"># 输出 {'age': 23, 'job': 'student'}</span>

<span class="c">################################################</span>
<span class="c"># 存储在文件中</span>
<span class="c"># 序列化</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'abc.pkl'</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">dic</span> <span class="o">=</span> <span class="p">{</span><span class="s">'age'</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span> <span class="s">'job'</span><span class="p">:</span> <span class="s">'student'</span><span class="p">}</span>
    <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">dic</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
<span class="c"># 反序列化</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'abc.pkl'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">aa</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">aa</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">aa</span><span class="p">))</span>
    
<span class="c">################################################</span>
<span class="c"># 序列化自定义对象(可以序列化类)</span>
<span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">job</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">job</span> <span class="o">=</span> <span class="n">job</span>

    <span class="k">def</span> <span class="nf">work</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="s">'is working...'</span><span class="p">)</span>
        
<span class="c"># 将实例存储在变量中，当然也能存在文件中</span>
<span class="n">a_person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">'abc'</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="s">'waiter'</span><span class="p">)</span>
<span class="n">person_abc</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">a_person</span><span class="p">)</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">person_abc</span><span class="p">)</span>
<span class="n">p</span><span class="o">.</span><span class="n">work</span><span class="p">()</span>

<span class="c"># 将类本身存储在变量中，loads的时候返回类本身，而非它的一个实例</span>
<span class="n">class_Person</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">Person</span><span class="p">)</span>
<span class="n">Person</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">class_Person</span><span class="p">)</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">'Bob'</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="s">'Student'</span><span class="p">)</span>
<span class="n">p</span><span class="o">.</span><span class="n">work</span><span class="p">()</span>

<span class="c"># 将类存储在文件中</span>
<span class="c"># 序列化</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'person.pkl'</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">Person</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>

<span class="c"># 反序列化</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'person.pkl'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">Person</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">aa</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">'gg'</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="s">'6'</span><span class="p">)</span>
    <span class="n">aa</span><span class="o">.</span><span class="n">work</span><span class="p">()</span>
</code></pre></div></div>

<p>优点是不用实现额外的函数, 可以序列化<code class="highlighter-rouge">类</code>; 缺点是该模块为python特有, 不便于和其他语言之间交互.</p>

]]></content>
      <categories>
        
          <category> Python </category>
        
      </categories>
      <tags>
        
          <tag> python3 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[RPG游戏整体规划]]></title>
      <url>/game/2017/09/26/rpg-planning/</url>
      <content type="html"><![CDATA[<!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, ]-->
<!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]-->

<h2 id="rpg游戏整体规划">RPG游戏整体规划</h2>

<p>一直以来都有个夙愿，就是自己不使用引擎，从零开始开发一款传统rpg游戏，一方面因为自己喜欢传统单机rpg，另一方面，因为对金老的《射雕英雄传》有一种说不清的情怀，但是以《射雕》为背景的让我满意的游戏却没有一个。面对这么好的rpg素材，一直就不甘心，所以一定要自己完成个“射雕RPG”过过瘾才好。不求画面多么精美，我也没有专业的美工，重点是剧情一定要贴合原著，为了实现这个夙愿，打算着手考虑开发相关事宜。</p>

<p>开始不打算直接针对射雕来，而是先实现一个简单的rpg框架。在动手撸代码之前，先规划一下整体结构，之前没做个类似项目，只能按自己的想法搞了。这个也不是严格的类的结构，只是一个整体规划。</p>

<!--more-->

<h3 id="总体结构">总体结构</h3>

<p>首先，整体分两部分，一部分是<code class="highlighter-rouge">舞台</code>，另一部分是<code class="highlighter-rouge">仓库</code>：</p>

<pre><code class="language-mermaid">graph LR
frame(框架)--&gt;stage(舞台)
frame--&gt;store(仓库)

stage--&gt;scene(场景)
stage--&gt;character(角色)
stage--&gt;collision(碰撞检测)
stage--&gt;painter(渲染)
stage--&gt;switch(场景切换)
stage--&gt;keyevent(按键检测)
stage--&gt;timer(计时器)
stage--&gt;ui(UI)
stage--&gt;fight(战斗系统)

store--&gt;scenelist(场景列表)
store--&gt;eventlist(事件列表)
store--&gt;characterlist(角色列表))
</code></pre>
<p><img src="https://raw.githubusercontent.com/li-tianqi/blog/gh-pages/assets/post_images/20170926/01.png" alt="img01.png" /></p>

<p>仓库用来存放各种实例，就像供等待演出的演员待的后台；舞台是演出展示的地方，每一时刻会有一个场景和一些角色在舞台上表演。所以根据剧情流程将不同的场景和角色载入到舞台即可。另外，舞台还需要有诸如碰撞检测，渲染，切换场景，按键检测，总体计时器等功能，对于像一些系统功能按钮以及展示系统角色等信息的UI界面，暂时放在舞台当中，还有战斗系统，也没想好具体怎么组织，暂时包含在舞台里。初期不打算做功能性UI界面和战斗系统，所以先放一放。</p>

<p>对于<code class="highlighter-rouge">碰撞检测</code>，可以提供两个对象的位置信息和碰撞条件，返回bool类型的检测结果。</p>

<p>对于<code class="highlighter-rouge">按键监测</code>，可能需要在不同场景有不同功能，比如战斗，普通，UI等。</p>

<h3 id="场景">场景</h3>

<p>场景应该作为一个很重要的部分</p>

<pre><code class="language-mermaid">graph LR
scene(场景)--&gt;sceneid(场景ID)
scene--&gt;map(地图对象)
map--&gt;mapinformation(地图数据,地图图片,坐标)
scene--&gt;object(物体对象)
object--&gt;objectinformation(覆盖物,障碍物...)
scene--&gt;range(场景范围)
scene--&gt;coordinate(坐标信息)
coordinate--&gt;ci(场景绝对坐标,渲染坐标,图片坐标,主角在场景中的初始位置)
scene--&gt;eventlist(时间对象列表)
scene--&gt;subscene(子场景)
</code></pre>
<p><img src="https://raw.githubusercontent.com/li-tianqi/blog/gh-pages/assets/post_images/20170926/02.png" alt="img02.png" /></p>

<p><code class="highlighter-rouge">场景ID</code>作为场景的唯一标识符；</p>

<p><code class="highlighter-rouge">地图对象</code>其实也可以属于一种<code class="highlighter-rouge">物体对象</code>；</p>

<p><code class="highlighter-rouge">坐标</code>中绝对坐标作为其他坐标的参照；</p>

<p><code class="highlighter-rouge">事件对象列表</code>用来存放当前场景中绑定了事件的对象，用于检测是否在事件触发范围内，也就是检测碰撞是否发生；</p>

<p><code class="highlighter-rouge">子场景</code>是该场景中包含的诸如<code class="highlighter-rouge">室内场景</code>等。</p>

<h3 id="物体对象">物体对象</h3>

<p>物体对象可以作为其他对象的基类</p>

<pre><code class="language-mermaid">graph LR
object(物体对象)--&gt;id(对象ID)
object--&gt;coor(坐标)
object--&gt;pcoor(渲染坐标)
object--&gt;range(渲染范围)
object--&gt;show(显示功能)
object--&gt;event(绑定事件)
object--&gt;son(其他派生属性)
son--&gt;move(移动属性)
move--&gt;speed(移动速度)
move--&gt;movefunc(移动方法)
son--&gt;fight(战斗属性)
fight--&gt;1(精气神...)
fight--&gt;2(攻防速...)
fight--&gt;3(buff,debuff)
</code></pre>
<p><img src="https://raw.githubusercontent.com/li-tianqi/blog/gh-pages/assets/post_images/20170926/03.png" alt="img02.png" /></p>

<p>派生属性主要用于主角，敌人等会动的角色；</p>

<p>buff，defull等可能应该属于战斗系统，待定。</p>

<h3 id="事件">事件</h3>

<p>这里事件指的是游戏中发生的事件，比如任务，战斗，说话等，不包括键盘等控制事件（<em>UI事件可以包括在这，可以把UI定义为一个对象，绑定一个事件</em>），这里的事件都和对象绑定，可能是NPC对象，地图对象，覆盖物对象，隐身对象等。</p>

<pre><code class="language-mermaid">graph LR
event(事件)--&gt;id(事件ID)
event--&gt;status(事件状态)
status--&gt;s1(不可触发)
status--&gt;s2(可触发但未触发)
status--&gt;s3(已触发但未完成)
status--&gt;s4(已完成)
event--&gt;occur(发生情况)
occur--&gt;o1(重复)
occur--&gt;o2(周期)
occur--&gt;o3(一次性)
occur--&gt;o4(随机)
event--&gt;way(触发方式)
event--&gt;condition(触发条件)
event--&gt;what(事件内容)
</code></pre>
<p><img src="https://raw.githubusercontent.com/li-tianqi/blog/gh-pages/assets/post_images/20170926/04.png" alt="img02.png" /></p>

<p>在发生情况方面，事件有几种情况：</p>

<ul>
  <li>重复：比如NPC说话，物体介绍，场景切换</li>
  <li>周期：比如NPC有几段话，每次点击说一句，轮流说</li>
  <li>一次性：比如开宝箱，大部分任务，可触发有限次的也算</li>
  <li>随机：比如地图遇怪</li>
</ul>

<p><strong>*对于战斗单独考虑</strong> *</p>

<p>对于触发方式有几种情况：</p>

<ul>
  <li>在范围内点空格：比如说话，开宝箱，物体介绍</li>
  <li>达到地点自动触发：如场景切换，强制剧情，遇怪</li>
  <li>使用物品触发：如某些需要使用物品的任务</li>
</ul>

<h3 id="总结">总结</h3>

<p>大体规划了一下，暂时就想到这么多，后续可能还会再调整，最好应该再整理一个类的结构。</p>
]]></content>
      <categories>
        
          <category> Game </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[安装numpy, scipy, matplotlib]]></title>
      <url>/ubuntu/python/2017/09/26/install-numpy-scipy-matplotlib/</url>
      <content type="html"><![CDATA[<!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, ]-->
<!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]-->

<h2 id="安装numpy-scipy-matplotlib">安装numpy, scipy, matplotlib</h2>

<p>Ubuntu中安装python的numpy, scipy, matplotlib库，以及在win10的Linux子系统中使用Xming提供图形界面显示</p>

<!--more-->

<h3 id="安装几个库">安装几个库</h3>

<p>基于python3的pip安装</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo apt-get install python3-pip
$ sudo pip3 install numpy 
$ sudo pip3 install scipy 
$ sudo pip3 install matplotlib 
$ sudo apt-get install python3-tk
</code></pre></div></div>

<h3 id="安装配置xming">安装配置Xming</h3>

<p>win10的Linux子系统默认不能用图形界面，也就不能显示matplotlib的画图，可以通过<a href="https://en.wikipedia.org/wiki/Xming">Xming</a>弥补</p>

<p><a href="https://sourceforge.net/projects/xming/">下载Xming</a> 安装</p>

<p>为了不用每次使用都指定display变量，把它配置到环境变量中</p>

<p>在<code class="highlighter-rouge">~/.bashrc</code>文件中添加:</p>

<p><code class="highlighter-rouge">export DISPLAY=localhost:0.0</code></p>
]]></content>
      <categories>
        
          <category> Ubuntu </category>
        
          <category> Python </category>
        
      </categories>
      <tags>
        
          <tag> python3 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[LeetCode 005--Longest Common Prefix]]></title>
      <url>/leetcode/2017/09/06/leetcode-005-longest-common-prefix/</url>
      <content type="html"><![CDATA[<!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, ]-->
<!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]-->

<h2 id="leetcode-005-longest-common-prefix">LeetCode 005: Longest Common Prefix</h2>

<h3 id="问题描述">问题描述</h3>

<blockquote>
  <p><strong>14. Longest Common Prefix</strong></p>

  <p>Write a function to find the longest common prefix string amongst an array of strings.</p>
</blockquote>

<!--more-->

<ul>
  <li>输入：字符串数组</li>
  <li>要求：寻找数组中字符串的最长公共前缀</li>
  <li>输出：字符串</li>
</ul>

<p><em>注：注意数组为 <code class="highlighter-rouge">空</code> ，和数组中某一字符串为 <code class="highlighter-rouge">""</code> 的情况，我因为这个问题没注意提交错误了两次</em></p>

<hr />

<h3 id="解决方案">解决方案</h3>
<h4 id="思路">思路</h4>
<p>从头到尾遍历数组，两两比较字符串相同的部分，最终得到公共前缀</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">longestCommonPrefix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">strs</span><span class="p">):</span>
        <span class="s">"""
        :type strs: List[str]
        :rtype: str
        """</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">strs</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">''</span>
        
        <span class="n">s</span> <span class="o">=</span> <span class="n">strs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
            <span class="n">len_i</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">strs</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">len_s</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">len_i</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">len_s</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="s">''</span>
            <span class="n">k</span> <span class="o">=</span> <span class="n">len_i</span> <span class="o">&lt;</span> <span class="n">len_s</span> <span class="ow">and</span> <span class="n">len_i</span> <span class="ow">or</span> <span class="n">len_s</span>
            <span class="n">tmp</span> <span class="o">=</span> <span class="s">''</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">k</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">strs</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
                    <span class="n">tmp</span> <span class="o">+=</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">break</span>
                    
            <span class="n">s</span> <span class="o">=</span> <span class="n">tmp</span>
            <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="s">''</span><span class="p">:</span>
                <span class="k">break</span>
                
        <span class="k">return</span> <span class="n">s</span> 
</code></pre></div></div>

<p>后续补充更好的解决方案</p>
]]></content>
      <categories>
        
          <category> LeetCode </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[LeetCode 004--Roman to Integer]]></title>
      <url>/leetcode/2017/09/05/leetcode-004-roman-to-integer/</url>
      <content type="html"><![CDATA[<!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, ]-->
<!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]-->

<h2 id="leetcode-004-roman-to-integer">LeetCode 004: Roman to Integer</h2>

<h3 id="问题描述">问题描述</h3>

<blockquote>
  <p><strong>13. Roman to Integer</strong></p>

  <p>Given a roman numeral, convert it to an integer.</p>

  <p>Input is guaranteed to be within the range from 1 to 3999.</p>
</blockquote>

<!--more-->

<ul>
  <li>输入：字符串</li>
  <li>要求：将罗马数字转换为整数</li>
  <li>输出：整数</li>
</ul>

<p><em>注：输入数字范围为<code class="highlighter-rouge">1-3999</code>(为了确保不会出现用上横线表示1000倍的情况)</em></p>

<hr />

<h3 id="罗马数字介绍">罗马数字介绍</h3>

<p>要解决<code class="highlighter-rouge">罗马数字转为整数</code>的问题，首先要明确<a href="https://baike.baidu.com/item/罗马数字" target="_blank">罗马数字</a>的规则</p>

<h4 id="记数方法">记数方法</h4>

<p>罗马数字中有7个基本字符，如下表：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">基本字符</th>
      <th style="text-align: center">I</th>
      <th style="text-align: center">V</th>
      <th style="text-align: center">X</th>
      <th style="text-align: center">L</th>
      <th style="text-align: center">C</th>
      <th style="text-align: center">D</th>
      <th style="text-align: center">M</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">对应阿拉伯数字</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">5</td>
      <td style="text-align: center">10</td>
      <td style="text-align: center">50</td>
      <td style="text-align: center">100</td>
      <td style="text-align: center">500</td>
      <td style="text-align: center">1000</td>
    </tr>
  </tbody>
</table>

<p>以基本字符的排列表示数字，比如 <code class="highlighter-rouge">IV=4</code>, <code class="highlighter-rouge">MCMLXXVI=1976</code>, 具体规则如下</p>

<h4 id="组数规则">组数规则</h4>

<ol>
  <li>
    <p>相同数字连写，表示的数等于这些数字相加的和，比如 <code class="highlighter-rouge">III=3</code>，<code class="highlighter-rouge">XX=20</code></p>
  </li>
  <li>
    <p>小数字在大数字右边，表示的数等于这些数字相加的和，比如 <code class="highlighter-rouge">XII=12</code></p>
  </li>
  <li>
    <p>小数字（<strong>仅限<code class="highlighter-rouge">I</code>, <code class="highlighter-rouge">X</code>, <code class="highlighter-rouge">C</code></strong>）在大数字左边，表示的数等于大数减小数的差，如 <code class="highlighter-rouge">IV=4</code>, <code class="highlighter-rouge">IX=9</code></p>
  </li>
  <li>
    <p>在一个数上画一条线，表示将这个数扩大1000倍，如 $\overline{V}$=5000</p>
  </li>
</ol>

<h4 id="限制">限制</h4>

<ul>
  <li>连写重复数字最多不超过3个</li>
  <li><code class="highlighter-rouge">I</code>, <code class="highlighter-rouge">X</code>, <code class="highlighter-rouge">C</code>放在大数左边时，最多用一个</li>
  <li><code class="highlighter-rouge">V</code>, <code class="highlighter-rouge">L</code>, <code class="highlighter-rouge">D</code>放在大数右边时，只能用一个</li>
  <li><code class="highlighter-rouge">V</code>, <code class="highlighter-rouge">L</code>, <code class="highlighter-rouge">D</code>不能作为小数放左边，用相减的方式</li>
</ul>

<h3 id="解决方案">解决方案</h3>

<h4 id="思路">思路</h4>

<p>从右往左依次比较，左边比右边小就用减法，否则就用加法</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">romanToInt</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
        <span class="s">"""
        :type s: str
        :rtype: int
        """</span>
        <span class="n">dic</span> <span class="o">=</span> <span class="p">{</span><span class="s">'M'</span><span class="p">:</span><span class="mi">1000</span><span class="p">,</span> <span class="s">'D'</span><span class="p">:</span><span class="mi">500</span><span class="p">,</span> <span class="s">'C'</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span> <span class="s">'L'</span><span class="p">:</span><span class="mi">50</span><span class="p">,</span> <span class="s">'X'</span><span class="p">:</span><span class="mi">10</span><span class="p">,</span> <span class="s">'V'</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span> <span class="s">'I'</span><span class="p">:</span><span class="mi">1</span><span class="p">}</span>
        <span class="n">num</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">))):</span>
            <span class="n">num</span> <span class="o">=</span> <span class="p">(</span><span class="n">dic</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="o">&gt;=</span> <span class="n">dic</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]])</span> <span class="ow">and</span> <span class="n">num</span> <span class="o">+</span> <span class="n">dic</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="ow">or</span> <span class="n">num</span> <span class="o">-</span> <span class="n">dic</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]]</span>
        <span class="k">return</span> <span class="n">num</span>
</code></pre></div></div>

<p>这种效率较低</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">romanToInt</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
        <span class="s">"""
        :type s: str
        :rtype: int
        """</span>
        <span class="n">dic</span> <span class="o">=</span> <span class="p">{</span><span class="s">'M'</span><span class="p">:</span><span class="mi">1000</span><span class="p">,</span> <span class="s">'D'</span><span class="p">:</span><span class="mi">500</span><span class="p">,</span> <span class="s">'C'</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span> <span class="s">'L'</span><span class="p">:</span><span class="mi">50</span><span class="p">,</span> <span class="s">'X'</span><span class="p">:</span><span class="mi">10</span><span class="p">,</span> <span class="s">'V'</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span> <span class="s">'I'</span><span class="p">:</span><span class="mi">1</span><span class="p">}</span>
        <span class="n">i</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="n">num</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">a</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span>
            <span class="n">b</span> <span class="o">=</span> <span class="n">dic</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
            <span class="n">num</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">&gt;=</span> <span class="n">b</span><span class="p">)</span> <span class="ow">and</span> <span class="n">num</span> <span class="o">+</span> <span class="n">a</span> <span class="ow">or</span> <span class="n">num</span> <span class="o">-</span> <span class="n">a</span>
            <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">num</span>
</code></pre></div></div>

<p>这种有所提升</p>

]]></content>
      <categories>
        
          <category> LeetCode </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Windows 10内置Linux子系统]]></title>
      <url>/ubuntu/tutorial/2017/09/04/win10-linux-subsystem/</url>
      <content type="html"><![CDATA[<!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, ]-->
<!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]-->

<h2 id="win10内置linux子系统">Win10内置Linux子系统</h2>
<p>从win10的1607版本开始，新加入了内置的Linux子系统，比虚拟机或者双系统用起来更加方便，而且对机器性能要求更低。<br />
Linux子系统默认是未启用的，下面给出启用它的方法。</p>

<!--more-->

<h2 id="启用内置linux子系统">启用内置Linux子系统</h2>
<h3 id="step1检查系统是否符合要求">step1.检查系统是否符合要求</h3>
<p>对该功能的支持需要win10系统在一周年正式版及以上，也就是<code class="highlighter-rouge">1607</code>版以上<br />
首先确认自己系统版本<br />
在<code class="highlighter-rouge">设置-系统-关于</code>中查看<code class="highlighter-rouge">版本</code>，确保是<code class="highlighter-rouge">1607</code>以上，如果不是，请升级系统  <br />
<img src="https://raw.githubusercontent.com/li-tianqi/blog/gh-pages/assets/post_images/20170904/01.png" alt="img01.png" /></p>

<p>我这里是<code class="highlighter-rouge">1703</code>版本</p>

<h3 id="step2启用开发人员模式">step2.启用开发人员模式</h3>
<p>在<code class="highlighter-rouge">设置-更新和安全-针对开发人员</code>中，选择<code class="highlighter-rouge">开发人员模式</code>，根据弹出窗口提示操作<br />
<img src="https://raw.githubusercontent.com/li-tianqi/blog/gh-pages/assets/post_images/20170904/02.png" alt="img02.png" /></p>

<h3 id="step3开启适用于linux的windows子系统">step3.开启适用于Linux的Windows子系统</h3>
<p>打开<code class="highlighter-rouge">控制面板-程序-程序和功能-启用或关闭 Windows 功能</code>，勾选<code class="highlighter-rouge">适用于Linux的Windows子系统(Beta)</code>，根据弹出窗口提示操作，重启电脑<br />
<em>注： <code class="highlighter-rouge">控制面板</code> 可通过 <code class="highlighter-rouge">小娜</code> 搜索打开,  <code class="highlighter-rouge">1703</code> 版之前还可以通过 <code class="highlighter-rouge">win+x</code> 快捷键选择控制面板功能</em><br />
<img src="https://raw.githubusercontent.com/li-tianqi/blog/gh-pages/assets/post_images/20170904/03.png" alt="img03.png" /></p>

<p><img src="https://raw.githubusercontent.com/li-tianqi/blog/gh-pages/assets/post_images/20170904/04.png" alt="img04.png" /></p>

<h3 id="step4配置子系统">step4.配置子系统</h3>
<p>重启后，打开<code class="highlighter-rouge">命令行</code>或<code class="highlighter-rouge">Windows PowerShell</code>，输入<code class="highlighter-rouge">bash</code>，回车，根据命令行提示，完成<code class="highlighter-rouge">Ubuntu</code>的配置（包括用户名，密码等）</p>

<p><strong>到此就完成了Ubuntu子系统的启用</strong></p>

<p>可以尝试输入一些<code class="highlighter-rouge">bash</code>命令测试一下，比如<code class="highlighter-rouge">ls</code></p>

<h3 id="step5ubuntu子系统的使用方法">step5.Ubuntu子系统的使用方法</h3>
<p>之后要使用子系统，只要打开<code class="highlighter-rouge">命令行</code>或<code class="highlighter-rouge">Windows PowerShell</code>，输入<code class="highlighter-rouge">bash</code>，回车，即可进入Ubuntu环境</p>

<h2 id="注">注</h2>
<p><em>1. 在某一目录下，不要选中任何文件，按住 <code class="highlighter-rouge">shift</code> 键后点击鼠标 <code class="highlighter-rouge">右键</code> ，可以发现选项中多出了 <code class="highlighter-rouge">在此处打开Powershell窗口</code> 或 <code class="highlighter-rouge">在此处打开命令行</code> 选项，可以直接在该目录下打开 <code class="highlighter-rouge">命令行</code> 或 <code class="highlighter-rouge">Windows PowerShell</code></em><br />
<em>2. Linux子系统其实不止Ubuntu，还包括大部分是发行版Linux，只是Ubuntu用的相对较多，其他系统的使用方法这里不做介绍，有兴趣的可以查看其他教程</em><br />
<em>3. 子系统默认只有命令行，但其实也可以运行图形化程序，可以借助 <a href="https://baike.baidu.com/item/Xming" target="_blank">Xming</a> 这一工具实现，具体方法请参考其他教程</em></p>

<p>目前我在图形化显示方面的需求主要是用python分析数据画图时，需要显示图形，具体效果如下</p>

<!--百度：https://baike.baidu.com/item/Xming-->
<!--wiki：https://en.wikipedia.org/wiki/Xming-->

<p><img src="https://raw.githubusercontent.com/li-tianqi/blog/gh-pages/assets/post_images/20170904/05.png" alt="img05.png" /></p>
]]></content>
      <categories>
        
          <category> Ubuntu </category>
        
          <category> Tutorial </category>
        
      </categories>
      <tags>
        
          <tag> shell </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[LeetCode 003--Palindrome Number]]></title>
      <url>/leetcode/2017/09/04/leetcode-003-palindrome-number/</url>
      <content type="html"><![CDATA[<!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, ]-->
<!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]-->

<h2 id="leetcode-003-palindrome-number">LeetCode 003: Palindrome Number</h2>
<h3 id="问题描述">问题描述</h3>

<blockquote>
  <p><strong>9. Palindrome Number</strong></p>

  <p>Determine whether an integer is a palindrome. Do this without extra space.</p>

  <p>If you are thinking of converting the integer to string, note the restriction of using extra space.<br />
You could also try reversing an integer. However, if you have solved the problem “Reverse Integer”, you know that the reversed integer might overflow.</p>
</blockquote>

<!--more-->

<ul>
  <li>输入：整数</li>
  <li>要求：判断是否为回文数</li>
  <li>输出：布尔值</li>
</ul>

<p><em>注：</em><br />
<em>1. 明确提出不要用转成字符串的方法</em><br />
<em>2. 使用反转数字的话，注意反转后的整数溢出问题</em><br />
<em>3. 题目中要求不能使用额外空间</em><br />
<em>4. 实际上额外空间的要求存在问题，可以理解为恒定O(1)空间</em></p>

<hr />

<h3 id="解决方案">解决方案</h3>
<h4 id="思路">思路</h4>
<p>最直接的思路就是转成<code class="highlighter-rouge">字符串</code>后判断，比如</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">isPalindrome</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="s">"""
        :type x: int
        :rtype: bool
        """</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="ow">and</span> <span class="bp">True</span> <span class="ow">or</span> <span class="bp">False</span>
</code></pre></div></div>

<p>不过题目中要求不能用这种方法<br />
一直考虑的是不能使用<code class="highlighter-rouge">额外空间</code>，所以始终没思路，后来看了解决方案和讨论，才发现是题目描述有问题</p>

<h4 id="参考方法">参考方法</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">isPalindrome</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="s">"""
        :type x: int
        :rtype: bool
        """</span>
        <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">x</span> <span class="ow">is</span> <span class="ow">not</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        
        <span class="n">rev</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">rev</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">:</span>
            <span class="n">rev</span> <span class="o">=</span> <span class="n">rev</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">10</span>
            <span class="n">x</span> <span class="o">//=</span> <span class="mi">10</span>
            
        <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">rev</span> <span class="ow">or</span> <span class="n">x</span> <span class="o">==</span> <span class="n">rev</span> <span class="o">//</span> <span class="mi">10</span><span class="p">)</span> <span class="ow">and</span> <span class="bp">True</span> <span class="ow">or</span> <span class="bp">False</span>
</code></pre></div></div>

<blockquote>
  <ul>
    <li>该方法采用反转的方法，为了避免溢出，只针对一半进行反转，即只反转整数的右半部分，并与左半部分比较，相当于将整数切分成两部分</li>
    <li>比如对于 <code class="highlighter-rouge">2332</code> ，分为 <code class="highlighter-rouge">23</code> 和 <code class="highlighter-rouge">32</code> ,并对后者进行反转</li>
    <li><code class="highlighter-rouge">rev = rev * 10 + x % 10</code> 获取 <code class="highlighter-rouge">x</code> 最后一位，放于反转后的 <code class="highlighter-rouge">rev</code> 最后一位</li>
    <li><code class="highlighter-rouge">x //= 10</code> 去掉 <code class="highlighter-rouge">x</code> 最后一位</li>
    <li>直到切出一半的位数为止</li>
  </ul>

  <p><strong>判断是否为一半的方法</strong></p>
  <ul>
    <li>对于回文数，切出一半之前，<code class="highlighter-rouge">rev</code> 比 <code class="highlighter-rouge">x</code> 位数少，一定满足 <code class="highlighter-rouge">rev &lt; x</code>, 切出一半（奇数位为一多半）时，满足 <code class="highlighter-rouge">rev == x</code> (奇数位时为 <code class="highlighter-rouge">rev = x // 10</code> )</li>
    <li>对于非回文数，不会出现两者相等的情况，所以不管是一半还是一多半，只要 <code class="highlighter-rouge">rev</code> 比 <code class="highlighter-rouge">x</code> 大就可以停止切分了(切一部分只是为了防止溢出)</li>
    <li>时间复杂度为<em>O(log<sub>10</sub>n)</em>, 因为每次迭代将输入除以10，</li>
    <li>空间复杂度为<em>O(1)</em></li>
  </ul>
</blockquote>

<p>根据这一思路写完，提交时发现对于尾数是 <code class="highlighter-rouge">0</code> 的情况无法正确识别，因为尾数为 <code class="highlighter-rouge">0</code> 无法正常切分<br />
比如对于 <code class="highlighter-rouge">1210</code> , 切分结果为：</p>
<ul>
  <li>s1 -&gt; rev = 0,  x = 121</li>
  <li>s2 -&gt; rev = 1,  x = 12</li>
  <li>s3 -&gt; rev = 12, x = 1</li>
</ul>

<p>满足 <code class="highlighter-rouge">rev = x // 10</code>, 判断为 <code class="highlighter-rouge">True</code>, 但显然 <code class="highlighter-rouge">1210</code> 不是回文数<br />
所以要单独考虑尾数为 <code class="highlighter-rouge">0</code> 的情况，其中当 <code class="highlighter-rouge">x = 0</code> 时是特例</p>

]]></content>
      <categories>
        
          <category> LeetCode </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[LeetCode 002--Reverse Integer]]></title>
      <url>/leetcode/2017/09/03/leetcode-002-reverse-integer/</url>
      <content type="html"><![CDATA[<!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, ]-->
<!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]-->

<h2 id="leetcode-002-reverse-integer">LeetCode 002: Reverse Integer</h2>
<h3 id="问题描述">问题描述</h3>

<blockquote>
  <p><strong>7. Reverse Integer</strong></p>

  <p>Reverse digits of an integer.</p>
  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Example1: x = 123, return 321
Example2: x = -123, return -321
</code></pre></div>  </div>
</blockquote>

<!--more-->

<ul>
  <li>输入：整数</li>
  <li>要求：反转</li>
  <li>输出：整数</li>
</ul>

<p><em>注：</em><br />
<em>1. 注意输入的整数末尾是<code class="highlighter-rouge">0</code>的情况，比如<code class="highlighter-rouge">10100</code></em><br />
<em>2. 注意反转后的整数溢出问题</em><br />
<em>3. 假设输入为<code class="highlighter-rouge">32位</code>有符号数，反转后溢出时返回<code class="highlighter-rouge">0</code></em></p>

<hr />

<h3 id="解决方案">解决方案</h3>
<h4 id="思路">思路</h4>
<p>将绝对值转成字符串，对字符串反转，在转回<code class="highlighter-rouge">int</code>, 判断是否溢出.<br />
<em>注：python中int实际上并没有限定范围</em></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">reverse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="s">"""
        :type x: int
        :rtype: int
        """</span>
        <span class="c"># 32位带符号整数的范围</span>
        <span class="n">num_min</span> <span class="o">=</span> <span class="o">-</span><span class="p">(</span><span class="mi">2</span> <span class="o">**</span> <span class="mi">31</span><span class="p">)</span>
        <span class="n">num_max</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">**</span> <span class="mi">31</span> <span class="o">-</span><span class="mi">1</span>
        
        <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">num_max</span> <span class="ow">or</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">num_min</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">tmp</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">x</span><span class="p">))[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
            <span class="n">reversed_num</span> <span class="o">=</span> <span class="n">x</span><span class="o">&lt;</span><span class="mi">0</span> <span class="ow">and</span> <span class="o">-</span><span class="n">tmp</span> <span class="ow">or</span> <span class="n">tmp</span>    <span class="c"># expr and a or b 相当于C语言中的 expr ? a : b</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">reversed_num</span> <span class="o">&lt;=</span> <span class="n">num_max</span> <span class="ow">and</span> <span class="n">reversed_num</span> <span class="o">&gt;=</span> <span class="n">num_min</span><span class="p">)</span> <span class="ow">and</span> <span class="n">reversed_num</span> <span class="ow">or</span> <span class="mi">0</span>
</code></pre></div></div>

<p>这种方法的运行时间是<code class="highlighter-rouge">52ms</code>, python实现的最快的是<code class="highlighter-rouge">38ms</code></p>

<h4 id="更快的方法">更快的方法</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">reverse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="s">"""
        :type x: int
        :rtype: int
        """</span>
        
        <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="n">x</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
        <span class="n">rev</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">rev</span> <span class="o">=</span> <span class="n">rev</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">10</span>
            <span class="n">x</span> <span class="o">//=</span> <span class="mi">10</span>    <span class="c"># 结果是商的整数部分</span>
            <span class="k">if</span> <span class="n">rev</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="o">**</span><span class="mi">31</span> <span class="ow">or</span> <span class="n">rev</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">2</span><span class="o">**</span><span class="mi">31</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span>
        <span class="k">return</span> <span class="n">rev</span><span class="o">*</span><span class="n">s</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">x % 10</code>得到<code class="highlighter-rouge">x</code>的最右一位，<code class="highlighter-rouge">x //= 10</code>去掉最后一位, 每次循环结果相当于是把<code class="highlighter-rouge">x</code>的最后一位拿到<code class="highlighter-rouge">rev</code>的最后一位, 快的原因可能是每次循环只做简单的算术运算.</p>

]]></content>
      <categories>
        
          <category> LeetCode </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[LeetCode 001--Two Sum]]></title>
      <url>/leetcode/2017/09/03/leetcode-001-two-sum/</url>
      <content type="html"><![CDATA[<!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, ]-->
<!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]-->

<h2 id="leetcode-001-two-sum">LeetCode 001: Two Sum</h2>
<h3 id="问题描述">问题描述</h3>

<blockquote>
  <p><strong>1. Two Sum</strong>  </p>

  <p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.   
You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>

  <p><strong>Example:</strong></p>
  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
</code></pre></div>  </div>
</blockquote>

<!--more-->

<ul>
  <li>输入：一个整形数组，一个整数</li>
  <li>要求：在整形数组中找到两个数，使其和等于目标整数</li>
  <li>输出：两个数的下标索引值</li>
</ul>

<p><em>注：</em><br />
<em>1. 假设每个输入有且仅有唯一正确结果</em><br />
<em>2. 相同的数组元素不能使用两次（指索引相同）</em></p>

<hr />

<h3 id="解决方案">解决方案</h3>
<h4 id="最初的思路">最初的思路</h4>
<p>通过索引嵌套遍历数组，如果两个数相加等于目标整数，返回两个索引值</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="s">"""
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">j</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
                    <span class="k">return</span> <span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span>
</code></pre></div></div>

<p>提交时出现<code class="highlighter-rouge">Time Limit Exceeded</code>，原因是嵌套的两次遍历，时间复杂度为<em>O(n<sup>2</sup>)</em>，而且两次遍历都是从头开始的，而实际上第二次遍历从剩下的部分查找就好，所以也增加了不必要的查询时间消耗。</p>

<h4 id="改进后的思路">改进后的思路</h4>
<p>遍历数组，判断目标值与遍历值的差是否在数组的剩余部分，如果在，提取索引值并返回</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="s">"""
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">))):</span>
            <span class="k">if</span> <span class="n">target</span> <span class="o">-</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="ow">in</span> <span class="n">nums</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">!=</span> <span class="n">nums</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">target</span><span class="o">-</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]):</span>
                <span class="k">return</span> <span class="p">[</span><span class="n">nums</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">target</span><span class="o">-</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]),</span> <span class="n">j</span><span class="p">]</span>
</code></pre></div></div>

<p>这里从反向遍历，并从正向查找，避免了多余的查询，虽然提交通过，但list的查找复杂度为<em>O(n)</em>，所以总的时间复杂度仍然是*O(n<sup>2&lt;/suo&gt;)*</sup></p>

<h4 id="更优秀的方法">更优秀的方法</h4>
<p>因为用的python，所以重点看了discuss里python的方法。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="s">"""
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """</span>
        <span class="nb">map</span><span class="o">=</span><span class="p">{}</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="n">complement</span><span class="o">=</span><span class="n">target</span><span class="o">-</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">complement</span> <span class="ow">in</span> <span class="nb">map</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>    <span class="c"># dict.keys()返回所以可用键的列表</span>
                <span class="k">return</span> <span class="p">[</span><span class="nb">map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">complement</span><span class="p">),</span><span class="n">i</span><span class="p">]</span>    <span class="c"># dict['key']只能获取存在的值，不存在会触发KeyError, 而dict.get(key, default=None)如果不存在则返回一个默认值(可设置)</span>
            <span class="nb">map</span><span class="p">[</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">=</span><span class="n">i</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"There is no two numbers that they add up to this target"</span><span class="p">)</span>
</code></pre></div></div>

<p>这里循环内的查找是针对dict的，复杂度为<em>O(1)</em>，所以总的复杂度为<em>O(n)</em></p>
]]></content>
      <categories>
        
          <category> LeetCode </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[shell输出彩色字符]]></title>
      <url>/ubuntu/shell/2017/09/01/shell-echo-color/</url>
      <content type="html"><![CDATA[<!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, ]-->
<!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]-->

<h2 id="shell打印输出彩色字符">shell打印输出彩色字符</h2>

<p>shell中echo输出字符，设置字体颜色和背景颜色的方法：</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[背景颜色； 文字颜色m字符串</span><span class="se">\0</span><span class="s2">33[0m"</span>
</code></pre></div></div>

<!--more-->

<p><strong>说明：</strong><br />
<code class="highlighter-rouge">-e</code>: echo的选项参数，用于激活特殊字符解释器<br />
<code class="highlighter-rouge">\033</code>：引导非常规字符序列<br />
<code class="highlighter-rouge">m</code>: 设置属性并结束非常规字符序列</p>

<p><strong>举例：</strong></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[44;37;5mME</span><span class="se">\0</span><span class="s2">33[0m COOL"</span>  
</code></pre></div></div>
<p>输出<code class="highlighter-rouge">ME COOL</code>,其中<code class="highlighter-rouge">ME</code>为蓝底白字，<code class="highlighter-rouge">COOL</code>为普通，光标闪烁。</p>

<p><strong>可用编码及含义：</strong></p>

<table>
  <thead>
    <tr>
      <th>编码</th>
      <th style="text-align: left">颜色/动作</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td style="text-align: left">重新设置属性到缺省设置</td>
    </tr>
    <tr>
      <td>1</td>
      <td style="text-align: left">设置粗体</td>
    </tr>
    <tr>
      <td>2</td>
      <td style="text-align: left">设置一半亮度（模拟彩色显示器的颜色）</td>
    </tr>
    <tr>
      <td>4</td>
      <td style="text-align: left">设置下划线（模拟彩色显示器的颜色）</td>
    </tr>
    <tr>
      <td>5</td>
      <td style="text-align: left">设置闪烁</td>
    </tr>
    <tr>
      <td>7</td>
      <td style="text-align: left">设置反向图象</td>
    </tr>
    <tr>
      <td>22</td>
      <td style="text-align: left">设置一般密度</td>
    </tr>
    <tr>
      <td>24</td>
      <td style="text-align: left">关闭下划线</td>
    </tr>
    <tr>
      <td>25</td>
      <td style="text-align: left">关闭闪烁</td>
    </tr>
    <tr>
      <td>27</td>
      <td style="text-align: left">关闭反向图象</td>
    </tr>
    <tr>
      <td>30</td>
      <td style="text-align: left">设置黑色前景</td>
    </tr>
    <tr>
      <td>31</td>
      <td style="text-align: left">设置红色前景</td>
    </tr>
    <tr>
      <td>32</td>
      <td style="text-align: left">设置绿色前景</td>
    </tr>
    <tr>
      <td>33</td>
      <td style="text-align: left">设置棕色前景</td>
    </tr>
    <tr>
      <td>34</td>
      <td style="text-align: left">设置蓝色前景</td>
    </tr>
    <tr>
      <td>35</td>
      <td style="text-align: left">设置紫色前景</td>
    </tr>
    <tr>
      <td>36</td>
      <td style="text-align: left">设置青色前景</td>
    </tr>
    <tr>
      <td>37</td>
      <td style="text-align: left">设置白色前景</td>
    </tr>
    <tr>
      <td>38</td>
      <td style="text-align: left">在缺省的前景颜色上设置下划线</td>
    </tr>
    <tr>
      <td>39</td>
      <td style="text-align: left">在缺省的前景颜色上关闭下划线</td>
    </tr>
    <tr>
      <td>40</td>
      <td style="text-align: left">设置黑色背景</td>
    </tr>
    <tr>
      <td>41</td>
      <td style="text-align: left">设置红色背景</td>
    </tr>
    <tr>
      <td>42</td>
      <td style="text-align: left">设置绿色背景</td>
    </tr>
    <tr>
      <td>43</td>
      <td style="text-align: left">设置棕色背景</td>
    </tr>
    <tr>
      <td>44</td>
      <td style="text-align: left">设置蓝色背景</td>
    </tr>
    <tr>
      <td>45</td>
      <td style="text-align: left">设置紫色背景</td>
    </tr>
    <tr>
      <td>46</td>
      <td style="text-align: left">设置青色背景</td>
    </tr>
    <tr>
      <td>47</td>
      <td style="text-align: left">设置白色背景</td>
    </tr>
    <tr>
      <td>49</td>
      <td style="text-align: left">设置缺省黑色背景</td>
    </tr>
  </tbody>
</table>

<p><strong>常用组合：</strong></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[31m 红色字 </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[34m 黄色字 </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[41;33m 红底黄字 </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[41;37m 红底白字 </span><span class="se">\0</span><span class="s2">33[0m"</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[30m 黑色字 </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[31m 红色字 </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[32m 绿色字 </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[33m 黄色字 </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[34m 蓝色字 </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[35m 紫色字 </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[36m 天蓝字 </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[37m 白色字 </span><span class="se">\0</span><span class="s2">33[0m"</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[40;37m 黑底白字 </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[41;37m 红底白字 </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[42;37m 绿底白字 </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[43;37m 黄底白字 </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[44;37m 蓝底白字 </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[45;37m 紫底白字 </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[46;37m 天蓝底白字 </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[47;30m 白底黑字 </span><span class="se">\0</span><span class="s2">33[0m"</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[42;30;5m wwww </span><span class="se">\0</span><span class="s2">33[0m"</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33[47;30;5m wwww </span><span class="se">\0</span><span class="s2">33[0m"</span>
</code></pre></div></div>
]]></content>
      <categories>
        
          <category> Ubuntu </category>
        
          <category> Shell </category>
        
      </categories>
      <tags>
        
          <tag> shell </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Django学习记录]]></title>
      <url>/python/web/2017/08/15/django-practice/</url>
      <content type="html"><![CDATA[<p>做一个小工具要用到Django，简单熟悉一下Django创建项目的流程并记录一些需要注意的地方，之前已经搭建过Django开发环境，所以跳过这步。<br />
直接从建立项目开始。</p>

<!--more-->

<h3 id="入门练习">入门练习</h3>

<h4 id="1-新建项目">1. 新建项目：</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ django-admin.py startproject Demo
</code></pre></div></div>

<h4 id="2-新建app">2. 新建app：</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd Demo
$ python3 manage.py startapp Hello
</code></pre></div></div>

<h4 id="3-项目目录结构">3. 项目目录结构：</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── Hello
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── manage.py
└── Test
    ├── __init__.py
    ├── __pycache__
    │   ├── __init__.cpython-35.pyc
    │   └── settings.cpython-35.pyc
    ├── settings.py
    ├── urls.py
    └── wsgi.py

4 directories, 14 files

</code></pre></div></div>
<blockquote>
  <p>urls.py<br />
链接入口，关联到对应的 views.py 中的一个函数（或者乘坐 generic 类），访问的链接就对应一个函数。<br />
views.py<br />
处理用户发出的请求，从 urls.py 中对应而来，通过渲染 templates 中的网页可以为用户显示页面内容，比如登录后的用户名，用户请求的数据，通过其输出到页面。<br />
models.py<br />
与数据库操作相关，存入或读取数据时使用。当不使用数据库的时候，也可以当做一般的类封装文件，存储各种类的定义。<br />
forms.py<br />
表单，用户在浏览器上输入提交，对数据的验证工作以及输入框的生成等工作，都依托于此。<br />
admin.py<br />
后台文件，可以用少量的代码就拥有一个强大的后台。<br />
settings.py<br />
Django 的设置、配置文件，比如 DEBUG 的开关，静态文件的位置等等。</p>

  <p>除了这些，还有以上目录中未提及的：<br />
templates目录<br />
views.py 中的函数渲染 templates 中的 html 模板，得到动态内容的网页，可以用缓存来提高渲染速度。</p>
</blockquote>

<h4 id="4-编辑viewspy文件">4. 编辑views.py文件：</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># coding: utf-8</span>
<span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>

<span class="c"># Create your views here.</span>

<span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">u'Hello World'</span><span class="p">)</span>  <span class="c"># u'string' means unicode</span>
</code></pre></div></div>

<h4 id="5-在settingspy中添加app">5. 在settings.py中添加app:</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
    <span class="s">'django.contrib.admin'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth'</span><span class="p">,</span>
    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>
    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>
    <span class="s">'django.contrib.messages'</span><span class="p">,</span>
    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span>
    <span class="s">'Hello'</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<h4 id="6-配置urlurlspy">6. 配置URL（urls.py）</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>

<span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">Hello</span> <span class="kn">import</span> <span class="n">views</span> <span class="k">as</span> <span class="n">Hello_views</span>

<span class="n">admin</span><span class="o">.</span><span class="n">autodiscover</span><span class="p">()</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c"># Examples:</span>
    <span class="c"># url(r'^$', 'Test.views.home', name='home'),</span>
    <span class="c"># url(r'^blog/', include('blog.urls')),</span>

    <span class="n">url</span><span class="p">(</span><span class="s">r'^admin/'</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'^index'</span><span class="p">,</span> <span class="n">Hello_views</span><span class="o">.</span><span class="n">index</span><span class="p">)</span>
<span class="p">]</span>
</code></pre></div></div>

<h4 id="7-测试">7. 测试：</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 manage.py runserver 8080
</code></pre></div></div>

<p>浏览器127.0.0.1:8080/index/</p>

<h4 id="8-get方法传递参数实现加法">8. GET方法传递参数实现加法</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>

<span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'a'</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'b'</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">c</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">+</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>
	
<span class="c"># urls.py文件添加 url(r'^add/', calc_views.add, name='add')</span>
<span class="c"># 127.0.0.1:8080/add/?a=3&amp;b=4 传递a，b的值</span>

<span class="k">def</span> <span class="nf">add2</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="n">c</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">+</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>
	
<span class="c"># 加 url(r'^add/(\d+)/(\d+)/$', calc_views.add2, name='add2')</span>
<span class="c"># 127.0.0.1:8080/add/3/4 </span>
	
</code></pre></div></div>

<h4 id="9-添加模板文件">9. 添加模板文件</h4>
<p><strong>views.py添加home方法</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">home</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'home.html'</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>在对应app目录建立templates文件夹并添加home.html文件</strong></p>

<p><strong>配置路由</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">url</span><span class="p">(</span><span class="s">r'^home/'</span><span class="p">,</span> <span class="n">Hello_views</span><span class="o">.</span><span class="n">home</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'home'</span><span class="p">),</span>
</code></pre></div></div>

<p><strong>测试</strong></p>
<blockquote>
  <p>127.0.0.1:8080/home</p>
</blockquote>

<p><strong>提示找不到模板</strong></p>
<blockquote>
  <p>在settings中加上</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEMPLATES</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="s">'BACKEND'</span><span class="p">:</span> <span class="s">'django.template.backends.django.DjangoTemplates'</span><span class="p">,</span>
        <span class="s">'DIRS'</span><span class="p">:</span> <span class="p">[</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">'templates'</span><span class="p">)],</span>
        <span class="s">'APP_DIRS'</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
        <span class="s">'OPTIONS'</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">'context_processors'</span><span class="p">:</span> <span class="p">[</span>
                <span class="s">'django.template.context_processors.debug'</span><span class="p">,</span>
                <span class="s">'django.template.context_processors.request'</span><span class="p">,</span>
                <span class="s">'django.contrib.auth.context_processors.auth'</span><span class="p">,</span>
                <span class="s">'django.contrib.messages.context_processors.messages'</span><span class="p">,</span>
            <span class="p">],</span>
        <span class="p">},</span>
    <span class="p">},</span>
</code></pre></div></div>

<p><strong>再次测试提示警告</strong></p>
<blockquote>
  <p>WARNINGS:
?: (1<em>8.W001) The standalone TEMPLATE</em>* settings were deprecated in Django 1.8 and the TEMPLATES dictionary takes precedence. You must put the values of the following settings into your default TEMPLATES dict: TEMPLATE_DEBUG.</p>
</blockquote>

<p>在settings中将TEMPLATE_开头的项都移到TEMPLATES中</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEMPLATES</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="s">'BACKEND'</span><span class="p">:</span> <span class="s">'django.template.backends.django.DjangoTemplates'</span><span class="p">,</span>
        <span class="s">'DIRS'</span><span class="p">:</span> <span class="p">[</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">'templates'</span><span class="p">)],</span>
        <span class="s">'APP_DIRS'</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
        <span class="s">'OPTIONS'</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">'context_processors'</span><span class="p">:</span> <span class="p">[</span>
                <span class="s">'django.template.context_processors.debug'</span><span class="p">,</span>
                <span class="s">'django.template.context_processors.request'</span><span class="p">,</span>
                <span class="s">'django.contrib.auth.context_processors.auth'</span><span class="p">,</span>
                <span class="s">'django.contrib.messages.context_processors.messages'</span><span class="p">,</span>
            <span class="p">],</span>
			<span class="s">'debug'</span><span class="p">:</span> <span class="n">DEBUG</span><span class="p">,</span> <span class="c"># 如这行</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>
</code></pre></div></div>

<h4 id="10-模型与数据库">10. 模型与数据库</h4>
<p><strong>在模型中定义数据库结构</strong><br />
app目录下的models.py</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
    <span class="n">age</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">()</span>
	
	<span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  <span class="c"># 该方法用于查询数据库时返回具体表项</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
		
	<span class="c"># 定义Person类，继承自models.Model</span>
</code></pre></div></div>

<p><strong>执行同步数据库操作</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 manage.py makemigrations
$ python3 manage.py migrate
# 这里用默认的sqlites数据库，无需其他操作
</code></pre></div></div>

<p><strong>使用数据库测试</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 manage.py shell
&gt;&gt;&gt; from Hello.models import Person
&gt;&gt;&gt; Person.objects.create(name="LI", age=23)
&lt;Person: Person object&gt;

&gt;&gt;&gt; Person.objects.get(name="LI")
&lt;Person: Person object&gt;  # 此为不加__str__方法时的返回结果

&gt;&gt;&gt; Person.objects.get(name="LI")
&lt;Person: LI&gt;  # 此为加了__str__方法时的返回结果
</code></pre></div></div>

<p><strong>其他操作</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 增操作
# 1
Person.objects.create(name = name, age = age)

# 2
p = Person(name = name, age = age)
p.save()

# 3
p = Person(name = name)
p.age = age
p.save()

# 4 
Person.objects.get_or_create(name = name, age = age)
# 该方法用于防止重复，返回元祖，第一个是Person对象，第二个是布尔值，新建为True，已存在为False


# 查操作
Person.objects.all()

# 2. 切片操作，获取10个人，不支持负索引，切片可以节约内存
Person.objects.all()[:10]

# 3
Person.objects.get(name = name)

# 4. get是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到 filter
Person.objects.filter(name = "abc")

# 5. 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件
Person.objects.filter(name__iexact = "abc")

# 6. 名称中包含 "abc"的人
Person.objects.filter(name__contains = "abc")

# 7. 名称中包含 "abc"，且abc不区分大小写
Person.objects.filter(name__icontains = "abc")

# 8. 正则表达式查询
Person.objects.filter(name__regex = "^abc")

# 9. 正则表达式不区分大小写
Person.objects.filter(name__iregex = "^abc")

# 10. 排除包含 WZ 的Person对象
Person.objects.exclude(name__contains = "WZ")

# 11. 找出名称含有abc, 但是排除年龄是23岁的
Person.objects.filter(name__contains="abc").exclude(age = 23)
</code></pre></div></div>

<p><strong>总结使用数据库的方法</strong></p>
<ul>
  <li>在app对应的models.py中建立相应的表项类</li>
  <li>同步数据库</li>
  <li>对数据库操作</li>
</ul>

<h4 id="11-表单">11. 表单</h4>
<p><strong>GET方法提交表单</strong><br />
<em>实现计算a+b和</em><br />
在对应app下添加模板index.html文件</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;p&gt;</span>Please input 2 numbers:<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"/add/"</span> <span class="na">method=</span><span class="s">"get"</span><span class="nt">&gt;</span>
    a: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"a"</span><span class="nt">&gt;</span> <span class="nt">&lt;br&gt;</span>
    b: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"b"</span><span class="nt">&gt;</span> <span class="nt">&lt;br&gt;</span>
	<span class="c">&lt;!--name属性用于将网页中的值传递给服务器--&gt;</span>

    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"submit"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>

<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>views.py</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
<span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>

<span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'index.html'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'a'</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'b'</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
	<span class="c"># 这里的'a'就是上面的name标签</span>
	
    <span class="n">a</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">))</span>
</code></pre></div></div>

<p>urls.py</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'^admin/'</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'^index/'</span><span class="p">,</span> <span class="n">learn_views</span><span class="o">.</span><span class="n">index</span><span class="p">),</span>
	<span class="c"># 表单页面</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'^add/$'</span><span class="p">,</span> <span class="n">learn_views</span><span class="o">.</span><span class="n">add</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'add'</span><span class="p">),</span>
	<span class="c"># 提交后的结果页面</span>
</code></pre></div></div>

<p><strong>POST方式提交表单</strong><br />
在对应app目录下新建forms.py</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django</span> <span class="kn">import</span> <span class="n">forms</span>

<span class="k">class</span> <span class="nc">AddForm</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">Form</span><span class="p">):</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">()</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">()</span>
</code></pre></div></div>

<p>views.py</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">.forms</span> <span class="kn">import</span> <span class="n">AddForm</span>

<span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="c"># 当表单以 POST 方式提交的时候</span>
        <span class="n">form</span> <span class="o">=</span> <span class="n">AddForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
            <span class="c"># 如果提交的数据合法</span>
            <span class="n">a</span> <span class="o">=</span> <span class="n">form</span><span class="o">.</span><span class="n">cleaned_data</span><span class="p">[</span><span class="s">'a'</span><span class="p">]</span>
            <span class="n">b</span> <span class="o">=</span> <span class="n">form</span><span class="o">.</span><span class="n">cleaned_data</span><span class="p">[</span><span class="s">'b'</span><span class="p">]</span>
			<span class="c"># cleaned_data用于读取表单返回值</span>
            <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">+</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">)))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c"># 正常方位时</span>
        <span class="n">form</span> <span class="o">=</span> <span class="n">AddForm</span><span class="p">()</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'index.html'</span><span class="p">,</span> <span class="p">{</span><span class="s">'form'</span><span class="p">:</span> <span class="n">form</span><span class="p">})</span>
</code></pre></div></div>

<p>index.html</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;p&gt;</span>Please Input 2 numbers:<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">'post'</span><span class="nt">&gt;</span>
    { % csrf_token % }
    { { form } }
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"submit"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span></pre></td></tr></tbody></table></code></pre></figure>

<p>urls.py</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'^admin/'</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'^$'</span><span class="p">,</span> <span class="n">calc_views</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'home'</span><span class="p">),</span>
<span class="p">]</span>
</code></pre></div></div>
]]></content>
      <categories>
        
          <category> Python </category>
        
          <category> Web </category>
        
      </categories>
      <tags>
        
          <tag> python3 </tag>
        
          <tag> Django </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Python虚拟环境]]></title>
      <url>/ubuntu/python/tutorial/2017/08/11/virtualenv/</url>
      <content type="html"><![CDATA[<h2 id="安装virtualenv">安装virtualenv</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ pip install virtualenv
</code></pre></div></div>

<h2 id="创建环境">创建环境</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ virtualenv venv_name
</code></pre></div></div>

<h2 id="激活环境">激活环境</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ source venv_name/bin/activate
</code></pre></div></div>

<h2 id="退出环境">退出环境</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ deactivate
</code></pre></div></div>

<h2 id="删除环境">删除环境</h2>
<blockquote>
  <p>删除对应文件夹</p>
</blockquote>
]]></content>
      <categories>
        
          <category> Ubuntu </category>
        
          <category> Python </category>
        
          <category> Tutorial </category>
        
      </categories>
      <tags>
        
          <tag> python3 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Ubuntu搭建jekyll环境]]></title>
      <url>/ubuntu/web/2017/08/11/build-jekyll-in-ubuntu/</url>
      <content type="html"><![CDATA[<p>jekyll环境搭建</p>

<!--more-->

<h2 id="ubuntu中搭建jekyll环境">Ubuntu中搭建jekyll环境</h2>
<h3 id="1-安装ruby">1. 安装ruby</h3>
<p><code class="highlighter-rouge">
$ sudo apt-get install ruby ruby-dev
</code>
测试安装结果<br />
`
$ ruby -v
`</p>

<h3 id="2-安装nodejs">2. 安装nodejs</h3>
<blockquote>
  <p>之所以要安装nodejs是因为ruby的gem管理需要用到nodejs环境
`
$ sudo apt-get install nodejs
`
测试<br />
`
$ $ gem -v
`</p>
</blockquote>

<h3 id="3-安装jekyll">3. 安装jekyll</h3>
<p><code class="highlighter-rouge">
$ sudo gem install jekyll
</code>
测试<br />
`
$ jekyll new ttestblog
`
创建成功说明安装成功</p>

<p><em>注：可能遇到问题：</em><br />
提示</p>
<blockquote>
  <p>Dependency Error: Yikes! It looks like you don’t have bundler or one of its dependencies installed. In order to use Jekyll as currently configured, you’ll need to install this gem. The full error message from Ruby is: ‘cannot load such file – bundler’ If you run into trouble, you can find helpful resources at https://jekyllrb.com/help/! 
jekyll 3.5.1 | Error:  bundler<br />
解决方法：安装bundler
`
$ sudo gem install bundler
`</p>
</blockquote>

<h3 id="4-查看生成的项目">4. 查看生成的项目</h3>
<p><code class="highlighter-rouge">
$ jekyll serve
</code>
浏览器输入<code class="highlighter-rouge">127.0.0.1:4000</code></p>
]]></content>
      <categories>
        
          <category> Ubuntu </category>
        
          <category> Web </category>
        
      </categories>
      <tags>
        
          <tag> jekyll </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[MySQL命令]]></title>
      <url>/database/2017/08/04/mysql-command/</url>
      <content type="html"><![CDATA[<p>记录mysql命令</p>

<!--more-->

<h2 id="mysql命令记录">MySQL命令记录</h2>
<ul>
  <li>查看数据库：
    <blockquote>
      <p>SHOW DATABASES;</p>
    </blockquote>
  </li>
  <li>创建数据库：
    <blockquote>
      <p>CREATE DATABASE db_name;</p>
    </blockquote>
  </li>
  <li>选择数据库：
    <blockquote>
      <p>USE db_name;</p>
    </blockquote>
  </li>
  <li>查看表：
    <blockquote>
      <p>SHOW TABLES;</p>
    </blockquote>
  </li>
  <li>查看数据库编码：
    <blockquote>
      <p>SHOW VARIABLES LIKE ‘character%’;</p>
    </blockquote>
  </li>
  <li>修改编码为utf8:
    <blockquote>
      <p>修改文件/etc/mysql/my.cnf，添加:</p>
      <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[client]
default-character-set=utf8
[mysqld]
character-set-server=utf8
[mysql]
default-character-set=utf8
</code></pre></div>      </div>
      <p>重启mysql</p>
      <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ service mysql restart
</code></pre></div>      </div>
    </blockquote>
  </li>
</ul>

]]></content>
      <categories>
        
          <category> Database </category>
        
      </categories>
      <tags>
        
          <tag> mysql </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[解决每次git push都要输入用户密码的问题]]></title>
      <url>/tutorial/2017/08/04/git-push-https-to-ssh/</url>
      <content type="html"><![CDATA[<h2 id="解决每次git-push都要输入用户密码的问题">解决每次git push都要输入用户密码的问题</h2>

<p><strong>问题原因：</strong>
连接远程仓库时用的https方式而不是ssh方式。</p>

<p><strong>解决方法：</strong>
改成ssh方式</p>

<!--more-->

<ol>
  <li>查看连接协议：
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git remote -v
</code></pre></div>    </div>
  </li>
  <li>改为ssh：
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git remote rm origin
$ git remote add origin git@github.com:li-tianqi/blog.git
$ git push origin
</code></pre></div>    </div>
  </li>
</ol>

<p><strong>可能遇到的问题：</strong>
Permission denied (publickey).
原因：未设置公钥</p>

<p><strong>解决方法：</strong></p>

<ol>
  <li>生成本机公私钥：
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ssh-keygen -t rsa
</code></pre></div>    </div>
    <p><em>三次回车</em></p>
  </li>
  <li>查看公钥：
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat ~/.ssh/id_rsa.pub
</code></pre></div>    </div>
  </li>
  <li>将公钥添加到github的ssh key:
    <ul>
      <li>登录GitHub，选择sittings -&gt; SSH and GPG keys -&gt; New SSH key</li>
      <li>Title随意填</li>
      <li>Key处将公钥里的内容复制进去</li>
      <li>Add SSH key</li>
    </ul>
  </li>
</ol>

<p><em>注：不同用户的公私钥是独立的，包括root用户和普通用户，所以添加普通用户的公钥后，root用户还是无法正常用SSH的，还需单独添加。</em></p>
]]></content>
      <categories>
        
          <category> Tutorial </category>
        
      </categories>
      <tags>
        
          <tag> github </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Ubuntu中安装Django]]></title>
      <url>/tutorial/web/python/2017/08/03/install-django-in-ubuntu/</url>
      <content type="html"><![CDATA[<h2>Ubuntu中安装Django</h2>

<p>
平时习惯用python3，所以下面的安装过程都是基于python3<br/>

<!--more-->

注：建议在虚拟环境中安装，virtualenv的安装及用法这里不介绍<br/><br/>
1. 首先安装pip3
<pre>
$ sudo apt install python3-pip
</pre>
2. 通过pip3在线安装django
<pre>
$ pip3 install django
</pre>
3. 安装完成，通过python3测试一下
<pre>
$ python3
>>> import django
>>> django.get_version()
</pre>
显示Django版本表示正确安装
</p>]]></content>
      <categories>
        
          <category> Tutorial </category>
        
          <category> Web </category>
        
          <category> Python </category>
        
      </categories>
      <tags>
        
          <tag> github </tag>
        
          <tag> jekyll </tag>
        
          <tag> Django </tag>
        
          <tag> python3 </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[The tutorial of building a blog with Github Pages and Jekyll]]></title>
      <url>/tutorial/web/github/2017/08/02/the-tutorial-of-building-a-blog/</url>
      <content type="html"><![CDATA[<h2>The tutorial of building a blog with Github Pages and Jekyll</h2>

<p>
Today I learn to build a blog with Github Pages and Jekyll. Here recommend two very good tutorials.
<br/><br/>
<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" target="_blank">http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html</a>
<br/><br/>
<a href="http://blog.csdn.net/on_1y/article/details/19259435" target="_blank">http://blog.csdn.net/on_1y/article/details/19259435</a>
</p>
]]></content>
      <categories>
        
          <category> Tutorial </category>
        
          <category> Web </category>
        
          <category> Github </category>
        
      </categories>
      <tags>
        
          <tag> github </tag>
        
          <tag> jekyll </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
