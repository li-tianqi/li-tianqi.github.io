<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-11-13T17:45:14+08:00</updated><id>http://localhost:4000/</id><title type="html">Victor’s Blog</title><subtitle>This is Victor's blog.</subtitle><author><name>Victor LI</name></author><entry><title type="html">Python检测文件编码格式</title><link href="http://localhost:4000/python/2017/11/10/python-detect-encoding/" rel="alternate" type="text/html" title="Python检测文件编码格式" /><published>2017-11-10T00:00:00+08:00</published><updated>2017-11-10T00:00:00+08:00</updated><id>http://localhost:4000/python/2017/11/10/python-detect-encoding</id><content type="html" xml:base="http://localhost:4000/python/2017/11/10/python-detect-encoding/">&lt;!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, Game, ]--&gt;
&lt;!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]--&gt;

## Python检测文件编码格式

python3打开文件时默认以`utf-8`解析, 遇到非此编码文件, 会出现错误, 需要指定编码, 所以要检测文件编码

&lt;!--more--&gt;

方法: 

用二进制打开-&gt; 用`chardet` 检测

```python
import chardet

with open(filename, &quot;rb&quot;) as f:
	data = f.read()
	print(chardet.detect(data))
```</content><author><name>Victor LI</name></author><category term="python3" /><summary type="html">Python检测文件编码格式 python3打开文件时默认以utf-8解析, 遇到非此编码文件, 会出现错误, 需要指定编码, 所以要检测文件编码</summary></entry><entry><title type="html">Latex公式语法记录</title><link href="http://localhost:4000/latex/2017/11/10/latex-note/" rel="alternate" type="text/html" title="Latex公式语法记录" /><published>2017-11-10T00:00:00+08:00</published><updated>2017-11-10T00:00:00+08:00</updated><id>http://localhost:4000/latex/2017/11/10/latex-note</id><content type="html" xml:base="http://localhost:4000/latex/2017/11/10/latex-note/">&lt;!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, Game, Latex]--&gt;
&lt;!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]--&gt;

## Latex公式语法记录

用Typora写公式异常的方便, 而且所见即所得, 包括在word中也支持latex语法, 比自带公式编辑器和mathtype都快得多:

word中用自带公式编辑器: `Alt` + `=` 插入公式, 不用`$` 符号, 直接输入latex语法, `空格` 后显示效果(*支持语法并不全*) 

word中用mathtype: 直接输入由`$$` 包裹的latex公式, 按`Alt`+`\` 生成mathtype公式(*支持语法比较全, 但转换成公式的过程略慢*) 

---

为了方便查看语法, 这里随着使用, 逐步记录常用的Latex公式语法

&lt;!--more--&gt;

更多内容:  &lt;https://zh.wikibooks.org/wiki/LaTeX&gt;

希腊字母: &lt;https://en.wikipedia.org/wiki/Greek_alphabet&gt;

组合运算: $\binom{a}{b}$  

```
$\binom{a}{b}$
```

半边括号加矩阵形式:
$$
\left \{
\begin{matrix} 
a = 0 \\ 
a = 1 
\end{matrix} \right.
$$

```
$\left \{ \begin{matrix} a = 0 \\ a = 1 \end{matrix} \right.$
```

两边下标: $\sideset{_i^j}{_m^n}A$  

```
$\sideset{_i^j}{_m^n}A$
```

分数: $\frac{a}{b}$  

```
$\frac{a}{b}$
```

根号: $\sqrt{a}$ 

```
$\sqrt{}$
```

点: $\cdot$ 

```
$\cdot$
```

叉乘: $\times$ 

```
$\times$
```</content><author><name>Victor LI</name></author><summary type="html">Latex公式语法记录 用Typora写公式异常的方便, 而且所见即所得, 包括在word中也支持latex语法, 比自带公式编辑器和mathtype都快得多: word中用自带公式编辑器: Alt + = 插入公式, 不用$ 符号, 直接输入latex语法, 空格 后显示效果(支持语法并不全) word中用mathtype: 直接输入由$$ 包裹的latex公式, 按Alt+\ 生成mathtype公式(支持语法比较全, 但转换成公式的过程略慢) 为了方便查看语法, 这里随着使用, 逐步记录常用的Latex公式语法</summary></entry><entry><title type="html">nokogiri安装失败问题</title><link href="http://localhost:4000/ubuntu/web/2017/11/06/nokogiri-install/" rel="alternate" type="text/html" title="nokogiri安装失败问题" /><published>2017-11-06T00:00:00+08:00</published><updated>2017-11-06T00:00:00+08:00</updated><id>http://localhost:4000/ubuntu/web/2017/11/06/nokogiri-install</id><content type="html" xml:base="http://localhost:4000/ubuntu/web/2017/11/06/nokogiri-install/">&lt;!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, Game, ]--&gt;
&lt;!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]--&gt;

## nokogiri安装失败问题

使用Jekyll时提示要安装nokogiri, 安装出错  

根据提示, 要参考日志文件

&lt;!--more--&gt;

日志文件中显示缺少`zlib.h`, 经百度, 对应的包为`zlib1g-dev`

安装之

```
apt-get install zlib1g-dev

sudo gem install nokogiri
```

成功!</content><author><name>Victor LI</name></author><category term="jekyll" /><summary type="html">nokogiri安装失败问题 使用Jekyll时提示要安装nokogiri, 安装出错 根据提示, 要参考日志文件</summary></entry><entry><title type="html">python的序列化和反序列化</title><link href="http://localhost:4000/python/2017/09/29/serialization-and-deserialization/" rel="alternate" type="text/html" title="python的序列化和反序列化" /><published>2017-09-29T00:00:00+08:00</published><updated>2017-09-29T00:00:00+08:00</updated><id>http://localhost:4000/python/2017/09/29/serialization-and-deserialization</id><content type="html" xml:base="http://localhost:4000/python/2017/09/29/serialization-and-deserialization/">&lt;!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, ]--&gt;
&lt;!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]--&gt;

## python的序列化和反序列化 

### 概念 

序列化(Serialization): 将对象状态存储为另一种通用格式, 比如二进制, xml, json等. 

反序列化(deserialization): 将对应格式再转换回来构建成对象. 

&lt;!--more--&gt;

### 使用情况 

a）当你想把的内存中的对象保存到一个文件中或者[数据库](https://www.2cto.com/database/)中时候；
b）当你想用套接字在网络上传送对象的时候；
c）当你想通过RMI传输对象的时候；

### python实现

python常用的序列化模块有两个: `pickle`和`json`, 其中`pickle`是将对象存储为`二进制`, 而`json`是将对象存储为`字符串`, 相对有更好的可读性和跨平台性. 

##### json模块

##### 将对象序列化为字符串 

用到的方法是`dumps(obj)` 和`loads(str)`, 举例如下:

```python
import json

dic = {'age':23, 'job': 'student'}

# 序列化
dic_str = json.dumps(dic)
print(type(dic_str), dic_str)

# 反序列化 
dic_obj = json.loads(dic_str)
print(type(dic_obj), dic_obj)
```

输出&gt;&gt;: 

```
&lt;class 'str'&gt; {&quot;age&quot;: 23, &quot;job&quot;: &quot;student&quot;}
&lt;class 'dict'&gt; {'age': 23, 'job': 'student'}
```

`dumps`将对象转换成了字符串, `loads`又将字符串恢复成了dict对象

##### 存储为json文件 

将对象存储为json文件也很常用, 用到的方法是`dump(obj)`和`load(str)`, (*注意和上面的区别, 上面的多了 `s`*), 例如: 

```python
import json

dic = {'age':23, 'job': 'student'}

# 序列化
with open('test.json', 'w', encoding='utf-8') as f:
    json.dump(dic, f)
# 生成json文件
    
# 反序列化
with open('test.json', encoding='utf-8') as f:
    obj = json.load(f)
    print(type(obj), obj)
```

输出&gt;&gt;: 

```
&lt;class 'dict'&gt; {'job': 'student', 'age': 23}
```

##### 存储自定义对象

直接用`dump`序列化会报错, 因为`dump`需要一个参数`default`, 这个参数接收一个函数, 将对象转化为字典, 对象`object`有自身的`__dict__`方法, 所以序列化过程可以如下:

```python
class Person:
    def __init__(self, name, age, job):
        self.name = name
        self.age = age
        self.job = job

    def work(self):
        print(self.name, 'is working...')

aa = Person('Bob', 23, 'Student')

with open('abc.json', 'w', encoding='utf-8') as f:
   json.dump(aa, f, default=lambda obj: obj.__dict__)
```

也可以自己写转换函数, 比如:

```python
def person2dict(person):
    return {'name': person.name,
            'age': person.age,
            'job': person.job}
  
with open('abc.json', 'w', encoding='utf-8') as f:
    json.dump(aa, f, default=person2dict)
```

对于反序列化, 也需要一个参数`object_hook`, 将字典转为对象

```python
def dict2person(dic):
    return Person(dic['name'], dic['age'], dic['job'])
  
with open('abc.json', encoding='utf-8') as f:
    obj = json.load(f, object_hook=dict2person)
```

用json模块实现, 需要手动实现`object_hook`参数, 并且不能序列化类. 

#### pickle模块

用法与json差不多

由于**pickle写入的是二进制数据**，所以打开方式需要以`wb`和`rb`的模式

```python
import pickle

dic = {'age': 23, 'job': 'student'}

##############################################
# 存储在变量中
# 序列化
byte_data = pickle.dumps(dic)
print(byte_data)
# 输出 b'\x80\x03}q\x00(X\x03\x00\x00\...'

# 反序列化
obj = pickle.loads(byte_data)
print(obj)
# 输出 {'age': 23, 'job': 'student'}

################################################
# 存储在文件中
# 序列化
with open('abc.pkl', 'wb') as f:
    dic = {'age': 23, 'job': 'student'}
    pickle.dump(dic, f)
# 反序列化
with open('abc.pkl', 'rb') as f:
    aa = pickle.load(f)
    print(aa)
    print(type(aa))
    
################################################
# 序列化自定义对象(可以序列化类)
class Person:
    def __init__(self, name, age, job):
        self.name = name
        self.age = age
        self.job = job

    def work(self):
        print(self.name, 'is working...')
        
# 将实例存储在变量中，当然也能存在文件中
a_person = Person('abc', 22, 'waiter')
person_abc = pickle.dumps(a_person)
p = pickle.loads(person_abc)
p.work()

# 将类本身存储在变量中，loads的时候返回类本身，而非它的一个实例
class_Person = pickle.dumps(Person)
Person = pickle.loads(class_Person)
p = Person('Bob', 23, 'Student')
p.work()

# 将类存储在文件中
# 序列化
with open('person.pkl', 'wb') as f:
    pickle.dump(Person, f)

# 反序列化
with open('person.pkl', 'rb') as f:
    Person = pickle.load(f)
    aa = Person('gg', 23, '6')
    aa.work()
```

优点是不用实现额外的函数, 可以序列化`类`; 缺点是该模块为python特有, 不便于和其他语言之间交互.</content><author><name>Victor LI</name></author><category term="python3" /><summary type="html">python的序列化和反序列化 概念 序列化(Serialization): 将对象状态存储为另一种通用格式, 比如二进制, xml, json等. 反序列化(deserialization): 将对应格式再转换回来构建成对象.</summary></entry><entry><title type="html">RPG游戏整体规划</title><link href="http://localhost:4000/game/2017/09/26/rpg-planning/" rel="alternate" type="text/html" title="RPG游戏整体规划" /><published>2017-09-26T00:00:00+08:00</published><updated>2017-09-26T00:00:00+08:00</updated><id>http://localhost:4000/game/2017/09/26/rpg-planning</id><content type="html" xml:base="http://localhost:4000/game/2017/09/26/rpg-planning/">&lt;!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, ]--&gt;
&lt;!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]--&gt;

&lt;h2 id=&quot;rpg游戏整体规划&quot;&gt;RPG游戏整体规划&lt;/h2&gt;

&lt;p&gt;一直以来都有个夙愿，就是自己不使用引擎，从零开始开发一款传统rpg游戏，一方面因为自己喜欢传统单机rpg，另一方面，因为对金老的《射雕英雄传》有一种说不清的情怀，但是以《射雕》为背景的让我满意的游戏却没有一个。面对这么好的rpg素材，一直就不甘心，所以一定要自己完成个“射雕RPG”过过瘾才好。不求画面多么精美，我也没有专业的美工，重点是剧情一定要贴合原著，为了实现这个夙愿，打算着手考虑开发相关事宜。&lt;/p&gt;

&lt;p&gt;开始不打算直接针对射雕来，而是先实现一个简单的rpg框架。在动手撸代码之前，先规划一下整体结构，之前没做个类似项目，只能按自己的想法搞了。这个也不是严格的类的结构，只是一个整体规划。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;总体结构&quot;&gt;总体结构&lt;/h3&gt;

&lt;p&gt;首先，整体分两部分，一部分是&lt;code class=&quot;highlighter-rouge&quot;&gt;舞台&lt;/code&gt;，另一部分是&lt;code class=&quot;highlighter-rouge&quot;&gt;仓库&lt;/code&gt;：&lt;/p&gt;

&lt;script src=&quot;https://unpkg.com/mermaid@7.1.0/dist/mermaid.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
graph LR
frame(框架)--&amp;gt;stage(舞台)
frame--&amp;gt;store(仓库)

stage--&amp;gt;scene(场景)
stage--&amp;gt;character(角色)
stage--&amp;gt;collision(碰撞检测)
stage--&amp;gt;painter(渲染)
stage--&amp;gt;switch(场景切换)
stage--&amp;gt;keyevent(按键检测)
stage--&amp;gt;timer(计时器)
stage--&amp;gt;ui(UI)
stage--&amp;gt;fight(战斗系统)

store--&amp;gt;scenelist(场景列表)
store--&amp;gt;eventlist(事件列表)
store--&amp;gt;characterlist(角色列表))
&lt;/div&gt;

&lt;p&gt;仓库用来存放各种实例，就像供等待演出的演员待的后台；舞台是演出展示的地方，每一时刻会有一个场景和一些角色在舞台上表演。所以根据剧情流程将不同的场景和角色载入到舞台即可。另外，舞台还需要有诸如碰撞检测，渲染，切换场景，按键检测，总体计时器等功能，对于像一些系统功能按钮以及展示系统角色等信息的UI界面，暂时放在舞台当中，还有战斗系统，也没想好具体怎么组织，暂时包含在舞台里。初期不打算做功能性UI界面和战斗系统，所以先放一放。&lt;/p&gt;

&lt;p&gt;对于&lt;code class=&quot;highlighter-rouge&quot;&gt;碰撞检测&lt;/code&gt;，可以提供两个对象的位置信息和碰撞条件，返回bool类型的检测结果。&lt;/p&gt;

&lt;p&gt;对于&lt;code class=&quot;highlighter-rouge&quot;&gt;按键监测&lt;/code&gt;，可能需要在不同场景有不同功能，比如战斗，普通，UI等。&lt;/p&gt;

&lt;h3 id=&quot;场景&quot;&gt;场景&lt;/h3&gt;

&lt;p&gt;场景应该作为一个很重要的部分&lt;/p&gt;

&lt;script src=&quot;https://unpkg.com/mermaid@7.1.0/dist/mermaid.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
graph LR
scene(场景)--&amp;gt;sceneid(场景ID)
scene--&amp;gt;map(地图对象)
map--&amp;gt;mapinformation(地图数据,地图图片,坐标)
scene--&amp;gt;object(物体对象)
object--&amp;gt;objectinformation(覆盖物,障碍物...)
scene--&amp;gt;range(场景范围)
scene--&amp;gt;coordinate(坐标信息)
coordinate--&amp;gt;ci(场景绝对坐标,渲染坐标,图片坐标,主角在场景中的初始位置)
scene--&amp;gt;eventlist(时间对象列表)
scene--&amp;gt;subscene(子场景)
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;场景ID&lt;/code&gt;作为场景的唯一标识符；&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;地图对象&lt;/code&gt;其实也可以属于一种&lt;code class=&quot;highlighter-rouge&quot;&gt;物体对象&lt;/code&gt;；&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;坐标&lt;/code&gt;中绝对坐标作为其他坐标的参照；&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;事件对象列表&lt;/code&gt;用来存放当前场景中绑定了事件的对象，用于检测是否在事件触发范围内，也就是检测碰撞是否发生；&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;子场景&lt;/code&gt;是该场景中包含的诸如&lt;code class=&quot;highlighter-rouge&quot;&gt;室内场景&lt;/code&gt;等。&lt;/p&gt;

&lt;h3 id=&quot;物体对象&quot;&gt;物体对象&lt;/h3&gt;

&lt;p&gt;物体对象可以作为其他对象的基类&lt;/p&gt;

&lt;script src=&quot;https://unpkg.com/mermaid@7.1.0/dist/mermaid.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
graph LR
object(物体对象)--&amp;gt;id(对象ID)
object--&amp;gt;coor(坐标)
object--&amp;gt;pcoor(渲染坐标)
object--&amp;gt;range(渲染范围)
object--&amp;gt;show(显示功能)
object--&amp;gt;event(绑定事件)
object--&amp;gt;son(其他派生属性)
son--&amp;gt;move(移动属性)
move--&amp;gt;speed(移动速度)
move--&amp;gt;movefunc(移动方法)
son--&amp;gt;fight(战斗属性)
fight--&amp;gt;1(精气神...)
fight--&amp;gt;2(攻防速...)
fight--&amp;gt;3(buff,debuff)
&lt;/div&gt;

&lt;p&gt;派生属性主要用于主角，敌人等会动的角色；&lt;/p&gt;

&lt;p&gt;buff，defull等可能应该属于战斗系统，待定。&lt;/p&gt;

&lt;h3 id=&quot;事件&quot;&gt;事件&lt;/h3&gt;

&lt;p&gt;这里事件指的是游戏中发生的事件，比如任务，战斗，说话等，不包括键盘等控制事件（&lt;em&gt;UI事件可以包括在这，可以把UI定义为一个对象，绑定一个事件&lt;/em&gt;），这里的事件都和对象绑定，可能是NPC对象，地图对象，覆盖物对象，隐身对象等。&lt;/p&gt;

&lt;script src=&quot;https://unpkg.com/mermaid@7.1.0/dist/mermaid.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
graph LR
event(事件)--&amp;gt;id(事件ID)
event--&amp;gt;status(事件状态)
status--&amp;gt;s1(不可触发)
status--&amp;gt;s2(可触发但未触发)
status--&amp;gt;s3(已触发但未完成)
status--&amp;gt;s4(已完成)
event--&amp;gt;occur(发生情况)
occur--&amp;gt;o1(重复)
occur--&amp;gt;o2(周期)
occur--&amp;gt;o3(一次性)
occur--&amp;gt;o4(随机)
event--&amp;gt;way(触发方式)
event--&amp;gt;condition(触发条件)
event--&amp;gt;what(事件内容)
&lt;/div&gt;

&lt;p&gt;在发生情况方面，事件有几种情况：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;重复：比如NPC说话，物体介绍，场景切换&lt;/li&gt;
  &lt;li&gt;周期：比如NPC有几段话，每次点击说一句，轮流说&lt;/li&gt;
  &lt;li&gt;一次性：比如开宝箱，大部分任务，可触发有限次的也算&lt;/li&gt;
  &lt;li&gt;随机：比如地图遇怪&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;对于战斗单独考虑&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于触发方式有几种情况：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在范围内点空格：比如说话，开宝箱，物体介绍&lt;/li&gt;
  &lt;li&gt;达到地点自动触发：如场景切换，强制剧情，遇怪&lt;/li&gt;
  &lt;li&gt;使用物品触发：如某些需要使用物品的任务&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;大体规划了一下，暂时就想到这么多，后续可能还会再调整，最好应该再整理一个类的结构。&lt;/p&gt;</content><author><name>Victor LI</name></author><summary type="html">RPG游戏整体规划 一直以来都有个夙愿，就是自己不使用引擎，从零开始开发一款传统rpg游戏，一方面因为自己喜欢传统单机rpg，另一方面，因为对金老的《射雕英雄传》有一种说不清的情怀，但是以《射雕》为背景的让我满意的游戏却没有一个。面对这么好的rpg素材，一直就不甘心，所以一定要自己完成个“射雕RPG”过过瘾才好。不求画面多么精美，我也没有专业的美工，重点是剧情一定要贴合原著，为了实现这个夙愿，打算着手考虑开发相关事宜。 开始不打算直接针对射雕来，而是先实现一个简单的rpg框架。在动手撸代码之前，先规划一下整体结构，之前没做个类似项目，只能按自己的想法搞了。这个也不是严格的类的结构，只是一个整体规划。</summary></entry><entry><title type="html">安装numpy, scipy, matplotlib</title><link href="http://localhost:4000/ubuntu/python/2017/09/26/install-numpy-scipy-matplotlib/" rel="alternate" type="text/html" title="安装numpy, scipy, matplotlib" /><published>2017-09-26T00:00:00+08:00</published><updated>2017-09-26T00:00:00+08:00</updated><id>http://localhost:4000/ubuntu/python/2017/09/26/install-numpy-scipy-matplotlib</id><content type="html" xml:base="http://localhost:4000/ubuntu/python/2017/09/26/install-numpy-scipy-matplotlib/">&lt;!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, ]--&gt;
&lt;!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]--&gt;

## 安装numpy, scipy, matplotlib

Ubuntu中安装python的numpy, scipy, matplotlib库，以及在win10的Linux子系统中使用Xming提供图形界面显示

&lt;!--more--&gt;

### 安装几个库

基于python3的pip安装

``` 
$ sudo apt-get install python3-pip
$ sudo pip3 install numpy 
$ sudo pip3 install scipy 
$ sudo pip3 install matplotlib 
$ sudo apt-get install python3-tk
```

### 安装配置Xming

win10的Linux子系统默认不能用图形界面，也就不能显示matplotlib的画图，可以通过[Xming](https://en.wikipedia.org/wiki/Xming)弥补

[下载Xming](https://sourceforge.net/projects/xming/) 安装

为了不用每次使用都指定display变量，把它配置到环境变量中

在`~/.bashrc`文件中添加:

`export DISPLAY=localhost:0.0`</content><author><name>Victor LI</name></author><category term="python3" /><summary type="html">安装numpy, scipy, matplotlib Ubuntu中安装python的numpy, scipy, matplotlib库，以及在win10的Linux子系统中使用Xming提供图形界面显示</summary></entry><entry><title type="html">LeetCode 005–Longest Common Prefix</title><link href="http://localhost:4000/leetcode/2017/09/06/leetcode-005-longest-common-prefix/" rel="alternate" type="text/html" title="LeetCode 005--Longest Common Prefix" /><published>2017-09-06T00:00:00+08:00</published><updated>2017-09-06T00:00:00+08:00</updated><id>http://localhost:4000/leetcode/2017/09/06/leetcode-005-longest-common-prefix</id><content type="html" xml:base="http://localhost:4000/leetcode/2017/09/06/leetcode-005-longest-common-prefix/">&lt;!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, ]--&gt;
&lt;!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]--&gt;

## LeetCode 005: Longest Common Prefix

### 问题描述

&gt; **14. Longest Common Prefix**  
&gt;
&gt; Write a function to find the longest common prefix string amongst an array of strings.

&lt;!--more--&gt;

- 输入：字符串数组
- 要求：寻找数组中字符串的最长公共前缀
- 输出：字符串

*注：注意数组为 `空` ，和数组中某一字符串为 `&quot;&quot;` 的情况，我因为这个问题没注意提交错误了两次*  

---

### 解决方案
#### 思路
从头到尾遍历数组，两两比较字符串相同的部分，最终得到公共前缀  
```python
class Solution(object):
    def longestCommonPrefix(self, strs):
        &quot;&quot;&quot;
        :type strs: List[str]
        :rtype: str
        &quot;&quot;&quot;
        n = len(strs)
        if n == 0:
            return ''
        
        s = strs[0]
        for i in range(1,n):
            len_i = len(strs[i])
            len_s = len(s)
            if len_i == 0 or len_s == 0:
                return ''
            k = len_i &lt; len_s and len_i or len_s
            tmp = ''
            for j in range(k):
                if s[j] == strs[i][j]:
                    tmp += s[j]
                else:
                    break
                    
            s = tmp
            if s == '':
                break
                
        return s 
```

后续补充更好的解决方案</content><author><name>Victor LI</name></author><summary type="html">LeetCode 005: Longest Common Prefix 问题描述 14. Longest Common Prefix Write a function to find the longest common prefix string amongst an array of strings.</summary></entry><entry><title type="html">LeetCode 004–Roman to Integer</title><link href="http://localhost:4000/leetcode/2017/09/05/leetcode-004-roman-to-integer/" rel="alternate" type="text/html" title="LeetCode 004--Roman to Integer" /><published>2017-09-05T00:00:00+08:00</published><updated>2017-09-05T00:00:00+08:00</updated><id>http://localhost:4000/leetcode/2017/09/05/leetcode-004-roman-to-integer</id><content type="html" xml:base="http://localhost:4000/leetcode/2017/09/05/leetcode-004-roman-to-integer/">&lt;!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, ]--&gt;
&lt;!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]--&gt;

## LeetCode 004: Roman to Integer

### 问题描述

&gt; **13. Roman to Integer**  
&gt;
&gt; Given a roman numeral, convert it to an integer.
&gt;
&gt; Input is guaranteed to be within the range from 1 to 3999.

&lt;!--more--&gt;

- 输入：字符串
- 要求：将罗马数字转换为整数
- 输出：整数

*注：输入数字范围为`1-3999`(为了确保不会出现用上横线表示1000倍的情况)*  

---

### 罗马数字介绍  

要解决`罗马数字转为整数`的问题，首先要明确&lt;a href=&quot;https://baike.baidu.com/item/罗马数字&quot; target=&quot;_blank&quot;&gt;罗马数字&lt;/a&gt;的规则   

#### 记数方法

罗马数字中有7个基本字符，如下表：  

| 基本字符    |  I   |  V   |  X   |  L   |  C   |  D   |  M   |
| :------ | :--: | :--: | :--: | :--: | :--: | :--: | :--: |
| 对应阿拉伯数字 |  1   |  5   |  10  |  50  | 100  | 500  | 1000 |

以基本字符的排列表示数字，比如 `IV=4`, `MCMLXXVI=1976`, 具体规则如下  

#### 组数规则

1. 相同数字连写，表示的数等于这些数字相加的和，比如 `III=3`，`XX=20`  

2. 小数字在大数字右边，表示的数等于这些数字相加的和，比如 `XII=12`  

3. 小数字（**仅限`I`, `X`, `C`**）在大数字左边，表示的数等于大数减小数的差，如 `IV=4`, `IX=9` 

4. 在一个数上画一条线，表示将这个数扩大1000倍，如 $\overline{V}$=5000   

#### 限制

- 连写重复数字最多不超过3个
- `I`, `X`, `C`放在大数左边时，最多用一个
- `V`, `L`, `D`放在大数右边时，只能用一个
- `V`, `L`, `D`不能作为小数放左边，用相减的方式

### 解决方案

#### 思路

从右往左依次比较，左边比右边小就用减法，否则就用加法  

```python
class Solution(object):
    def romanToInt(self, s):
        &quot;&quot;&quot;
        :type s: str
        :rtype: int
        &quot;&quot;&quot;
        dic = {'M':1000, 'D':500, 'C':100, 'L':50, 'X':10, 'V':5, 'I':1}
        num = dic[s[len(s) - 1]]
        for i in reversed(range(1, len(s))):
            num = (dic[s[i-1]] &gt;= dic[s[i]]) and num + dic[s[i -1]] or num - dic[s[i - 1]]
        return num
```

这种效率较低  

``` python
class Solution(object):
    def romanToInt(self, s):
        &quot;&quot;&quot;
        :type s: str
        :rtype: int
        &quot;&quot;&quot;
        dic = {'M':1000, 'D':500, 'C':100, 'L':50, 'X':10, 'V':5, 'I':1}
        i = len(s) - 1
        num = dic[s[i]]
        while i &gt;= 1:
            a = dic[s[i-1]]
            b = dic[s[i]]
            num = (a &gt;= b) and num + a or num - a
            i -= 1
        return num
```

这种有所提升</content><author><name>Victor LI</name></author><summary type="html">LeetCode 004: Roman to Integer 问题描述 13. Roman to Integer Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</summary></entry><entry><title type="html">Windows 10内置Linux子系统</title><link href="http://localhost:4000/ubuntu/tutorial/2017/09/04/win10-linux-subsystem/" rel="alternate" type="text/html" title="Windows 10内置Linux子系统" /><published>2017-09-04T00:00:00+08:00</published><updated>2017-09-04T00:00:00+08:00</updated><id>http://localhost:4000/ubuntu/tutorial/2017/09/04/win10-linux-subsystem</id><content type="html" xml:base="http://localhost:4000/ubuntu/tutorial/2017/09/04/win10-linux-subsystem/">&lt;!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, ]--&gt;
&lt;!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]--&gt;

## Win10内置Linux子系统
从win10的1607版本开始，新加入了内置的Linux子系统，比虚拟机或者双系统用起来更加方便，而且对机器性能要求更低。  
Linux子系统默认是未启用的，下面给出启用它的方法。

&lt;!--more--&gt;

## 启用内置Linux子系统
### step1.检查系统是否符合要求
对该功能的支持需要win10系统在一周年正式版及以上，也就是`1607`版以上  
首先确认自己系统版本  
在`设置-系统-关于`中查看`版本`，确保是`1607`以上，如果不是，请升级系统    
![img01.png](https://raw.githubusercontent.com/li-tianqi/blog/gh-pages/assets/post_images/20170904/01.png)

我这里是`1703`版本  

### step2.启用开发人员模式
在`设置-更新和安全-针对开发人员`中，选择`开发人员模式`，根据弹出窗口提示操作  
![img02.png](https://raw.githubusercontent.com/li-tianqi/blog/gh-pages/assets/post_images/20170904/02.png)

### step3.开启适用于Linux的Windows子系统
打开`控制面板-程序-程序和功能-启用或关闭 Windows 功能`，勾选`适用于Linux的Windows子系统(Beta)`，根据弹出窗口提示操作，重启电脑  
*注： `控制面板` 可通过 `小娜` 搜索打开,  `1703` 版之前还可以通过 `win+x` 快捷键选择控制面板功能*  
![img03.png](https://raw.githubusercontent.com/li-tianqi/blog/gh-pages/assets/post_images/20170904/03.png)
  
  
![img04.png](https://raw.githubusercontent.com/li-tianqi/blog/gh-pages/assets/post_images/20170904/04.png)

### step4.配置子系统
重启后，打开`命令行`或`Windows PowerShell`，输入`bash`，回车，根据命令行提示，完成`Ubuntu`的配置（包括用户名，密码等）  

**到此就完成了Ubuntu子系统的启用**  

可以尝试输入一些`bash`命令测试一下，比如`ls`  

### step5.Ubuntu子系统的使用方法
之后要使用子系统，只要打开`命令行`或`Windows PowerShell`，输入`bash`，回车，即可进入Ubuntu环境  

## 注
*1. 在某一目录下，不要选中任何文件，按住 `shift` 键后点击鼠标 `右键` ，可以发现选项中多出了 `在此处打开Powershell窗口` 或 `在此处打开命令行` 选项，可以直接在该目录下打开 `命令行` 或 `Windows PowerShell`*  
*2. Linux子系统其实不止Ubuntu，还包括大部分是发行版Linux，只是Ubuntu用的相对较多，其他系统的使用方法这里不做介绍，有兴趣的可以查看其他教程*  
*3. 子系统默认只有命令行，但其实也可以运行图形化程序，可以借助 &lt;a href=&quot;https://baike.baidu.com/item/Xming&quot; target=&quot;_blank&quot;&gt;Xming&lt;/a&gt; 这一工具实现，具体方法请参考其他教程*  

目前我在图形化显示方面的需求主要是用python分析数据画图时，需要显示图形，具体效果如下  

&lt;!--百度：https://baike.baidu.com/item/Xming--&gt;
&lt;!--wiki：https://en.wikipedia.org/wiki/Xming--&gt;

![img05.png](https://raw.githubusercontent.com/li-tianqi/blog/gh-pages/assets/post_images/20170904/05.png)</content><author><name>Victor LI</name></author><category term="shell" /><summary type="html">Win10内置Linux子系统 从win10的1607版本开始，新加入了内置的Linux子系统，比虚拟机或者双系统用起来更加方便，而且对机器性能要求更低。 Linux子系统默认是未启用的，下面给出启用它的方法。</summary></entry><entry><title type="html">LeetCode 003–Palindrome Number</title><link href="http://localhost:4000/leetcode/2017/09/04/leetcode-003-palindrome-number/" rel="alternate" type="text/html" title="LeetCode 003--Palindrome Number" /><published>2017-09-04T00:00:00+08:00</published><updated>2017-09-04T00:00:00+08:00</updated><id>http://localhost:4000/leetcode/2017/09/04/leetcode-003-palindrome-number</id><content type="html" xml:base="http://localhost:4000/leetcode/2017/09/04/leetcode-003-palindrome-number/">&lt;!--categories: [Ubuntu, Database, Python, Github, Web, Tutorial, Test, Shell, LeetCode, ]--&gt;
&lt;!--tags: [jekyll, python3, github, Django, markdown, mysql, shell, ]--&gt;

## LeetCode 003: Palindrome Number 
### 问题描述  

&gt; **9. Palindrome Number**  
&gt; 
&gt; Determine whether an integer is a palindrome. Do this without extra space.  
&gt; 
&gt; If you are thinking of converting the integer to string, note the restriction of using extra space.  
&gt; You could also try reversing an integer. However, if you have solved the problem &quot;Reverse Integer&quot;, you know that the reversed integer might overflow.  

&lt;!--more--&gt;

- 输入：整数
- 要求：判断是否为回文数
- 输出：布尔值

*注：*  
*1. 明确提出不要用转成字符串的方法*  
*2. 使用反转数字的话，注意反转后的整数溢出问题*  
*3. 题目中要求不能使用额外空间*  
*4. 实际上额外空间的要求存在问题，可以理解为恒定O(1)空间*  

---

### 解决方案
#### 思路
最直接的思路就是转成`字符串`后判断，比如  
``` python
class Solution(object):
    def isPalindrome(self, x):
        &quot;&quot;&quot;
        :type x: int
        :rtype: bool
        &quot;&quot;&quot;
        return (x &gt;= 0 and str(x)[::-1] == str(x)) and True or False
```

不过题目中要求不能用这种方法  
一直考虑的是不能使用`额外空间`，所以始终没思路，后来看了解决方案和讨论，才发现是题目描述有问题  

#### 参考方法
``` python
class Solution(object):
    def isPalindrome(self, x):
        &quot;&quot;&quot;
        :type x: int
        :rtype: bool
        &quot;&quot;&quot;
        if x &lt; 0:
            return False
        if x % 10 == 0 and x is not 0:
            return False
        
        rev = 0
        while rev &lt; x:
            rev = rev * 10 + x % 10
            x //= 10
            
        return (x == rev or x == rev // 10) and True or False
```

&gt; - 该方法采用反转的方法，为了避免溢出，只针对一半进行反转，即只反转整数的右半部分，并与左半部分比较，相当于将整数切分成两部分  
&gt; - 比如对于 `2332` ，分为 `23` 和 `32` ,并对后者进行反转  
&gt; - `rev = rev * 10 + x % 10` 获取 `x` 最后一位，放于反转后的 `rev` 最后一位  
&gt; - `x //= 10` 去掉 `x` 最后一位  
&gt; - 直到切出一半的位数为止  
&gt; 
&gt; **判断是否为一半的方法**  
&gt; - 对于回文数，切出一半之前，`rev` 比 `x` 位数少，一定满足 `rev &lt; x`, 切出一半（奇数位为一多半）时，满足 `rev == x` (奇数位时为 `rev = x // 10` )  
&gt; - 对于非回文数，不会出现两者相等的情况，所以不管是一半还是一多半，只要 `rev` 比 `x` 大就可以停止切分了(切一部分只是为了防止溢出)  
&gt; - 时间复杂度为*O(log&lt;sub&gt;10&lt;/sub&gt;n)*, 因为每次迭代将输入除以10，
&gt; - 空间复杂度为*O(1)*

根据这一思路写完，提交时发现对于尾数是 `0` 的情况无法正确识别，因为尾数为 `0` 无法正常切分  
比如对于 `1210` , 切分结果为：  
- s1 -&gt; rev = 0,  x = 121  
- s2 -&gt; rev = 1,  x = 12  
- s3 -&gt; rev = 12, x = 1  

满足 `rev = x // 10`, 判断为 `True`, 但显然 `1210` 不是回文数  
所以要单独考虑尾数为 `0` 的情况，其中当 `x = 0` 时是特例</content><author><name>Victor LI</name></author><summary type="html">LeetCode 003: Palindrome Number 问题描述 9. Palindrome Number Determine whether an integer is a palindrome. Do this without extra space. If you are thinking of converting the integer to string, note the restriction of using extra space. You could also try reversing an integer. However, if you have solved the problem “Reverse Integer”, you know that the reversed integer might overflow.</summary></entry></feed>